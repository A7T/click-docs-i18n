# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Pallets
# This file is distributed under the same license as the Click package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Click 8.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 10:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../click/docs/api.rst:2
msgid "API"
msgstr ""

#: ../../click/docs/api.rst:6
msgid "This part of the documentation lists the full API reference of all public classes and functions."
msgstr ""

#: ../../click/docs/api.rst:10
msgid "Decorators"
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:1
msgid "Creates a new :class:`Command` and uses the decorated function as callback.  This will also automatically attach all decorated :func:`option`\\s and :func:`argument`\\s as parameters to the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:5
msgid "The name of the command defaults to the name of the function with underscores replaced by dashes.  If you want to change that, you can pass the intended name as the first argument."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:9
msgid "All keyword arguments are forwarded to the underlying command class."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:11
msgid "Once decorated the function turns into a :class:`Command` instance that can be invoked as a command line utility or be attached to a command :class:`Group`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.group:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.argument:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.password_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.confirmation_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_context:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_obj:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_meta_key:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.unstyle:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_binary_stream:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.format_filename:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.collect_usage_pieces:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_epilog:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help_text:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_options:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_usage:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option_names:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_short_help_str:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_usage:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.make_parser:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.collect_usage_pieces:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_options:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.list_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.add_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.group:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.list_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.add_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.list_commands:0
#: ../../click/docs/api.rst:97
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_error_hint:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.type_cast_value:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Argument:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.call_on_close:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.ensure_object:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.exit:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.fail:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.find_object:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.forward:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.set_parameter_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:0
#: ../../../.venv/lib/site-packages/click/globals.py:docstring of click.globals.get_current_context:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.STRING:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.INT:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.FLOAT:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.BOOL:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.UUID:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.UNPROCESSED:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.fail:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_metavar:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_missing_message:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.split_envvar_value:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.ClickException:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.UsageError:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadParameter:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.FileError:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.NoSuchOption:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadOptionUsage:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadArgumentUsage:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.section:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_heading:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_text:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_argument:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_option:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.parse_args:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completions:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.format_completion:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.add_completion_class:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.get_default_prog_name:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolated_filesystem:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.make_env:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.Result:0
msgid "Parameters"
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:15
msgid "the name of the command.  This defaults to the function name with underscores replaced by dashes."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:17
msgid "the command class to instantiate.  This defaults to :class:`Command`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.command:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.group:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.argument:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.password_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.confirmation_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_context:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_obj:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:0
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_meta_key:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.clear:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.unstyle:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:0
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.get_terminal_size:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_binary_stream:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:0
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.format_filename:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.collect_usage_pieces:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_epilog:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help_text:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_options:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_usage:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option_names:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_short_help_str:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_usage:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.make_parser:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.collect_usage_pieces:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_options:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.list_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.parse_args:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.add_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.group:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.list_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.add_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.get_command:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.list_commands:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_error_hint:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.shell_complete:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.type_cast_value:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Argument:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.abort:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.call_on_close:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.close:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.ensure_object:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.exit:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.fail:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.find_object:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.find_root:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.forward:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_help:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_usage:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.make_formatter:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.set_parameter_source:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:0
#: ../../../.venv/lib/site-packages/click/globals.py:docstring of click.globals.get_current_context:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.STRING:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.INT:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.FLOAT:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.BOOL:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.UUID:0
#: ../../../.venv/lib/site-packages/click/__init__.py:docstring of click.UNPROCESSED:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.fail:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_metavar:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_missing_message:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.split_envvar_value:0
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.to_info_dict:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.ClickException:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.UsageError:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadParameter:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.FileError:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.NoSuchOption:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadOptionUsage:0
#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadArgumentUsage:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.dedent:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.getvalue:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.indent:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.indentation:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.section:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_heading:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_paragraph:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_text:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:0
#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_argument:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_option:0
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.parse_args:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.source_vars:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.source:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completion_args:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completions:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.format_completion:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.complete:0
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.add_completion_class:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.get_default_prog_name:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolated_filesystem:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:0
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.make_env:0
msgid "Return type"
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.group:1
msgid "Creates a new :class:`Group` with a function as callback.  This works otherwise the same as :func:`command` just that the `cls` parameter is set to :class:`Group`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.argument:1
msgid "Attaches an argument to the command.  All positional arguments are passed as parameter declarations to :class:`Argument`; all keyword arguments are forwarded unchanged (except ``cls``). This is equivalent to creating an :class:`Argument` instance manually and attaching it to the :attr:`Command.params` list."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.argument:7
msgid "the argument class to instantiate.  This defaults to :class:`Argument`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.option:1
msgid "Attaches an option to the command.  All positional arguments are passed as parameter declarations to :class:`Option`; all keyword arguments are forwarded unchanged (except ``cls``). This is equivalent to creating an :class:`Option` instance manually and attaching it to the :attr:`Command.params` list."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.option:7
msgid "the option class to instantiate.  This defaults to :class:`Option`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.password_option:1
msgid "Add a ``--password`` option which prompts for a password, hiding input and asking to enter the value again for confirmation."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.password_option:4
msgid "One or more option names. Defaults to the single value ``\"--password\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.password_option:6
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.confirmation_option:6
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:24
#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:10
msgid "Extra arguments are passed to :func:`option`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.confirmation_option:1
msgid "Add a ``--yes`` option which shows a prompt before continuing if not passed. If the prompt is declined, the program will exit."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.confirmation_option:4
msgid "One or more option names. Defaults to the single value ``\"--yes\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:1
msgid "Add a ``--version`` option which immediately prints the version number and exits the program."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:4
msgid "If ``version`` is not provided, Click will try to detect it using :func:`importlib.metadata.version` to get the version for the ``package_name``. On Python < 3.8, the ``importlib_metadata`` backport must be installed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:9
msgid "If ``package_name`` is not provided, Click will try to detect it by inspecting the stack frames. This will be used to detect the version, so it must match the name of the installed package."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:13
msgid "The version number to show. If not provided, Click will try to detect it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:15
msgid "One or more option names. Defaults to the single value ``\"--version\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:17
msgid "The package name to detect the version from. If not provided, Click will try to detect it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:19
msgid "The name of the CLI to show in the message. If not provided, it will be detected from the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:21
msgid "The message to show. The values ``%(prog)s``, ``%(package)s``, and ``%(version)s`` are available. Defaults to ``\"%(prog)s, version %(version)s\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:0
msgid "Raises"
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:25
msgid "``version`` could not be detected."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:27
msgid "Add the ``package_name`` parameter, and the ``%(package)s`` value for messages."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.version_option:31
msgid "Use :mod:`importlib.metadata` instead of ``pkg_resources``. The version is detected based on the package name, not the entry point name. The Python package name must match the installed package name, or be passed with ``package_name=``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:1
msgid "Add a ``--help`` option which immediately prints the help page and exits the program."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:4
msgid "This is usually unnecessary, as the ``--help`` option is added to each command automatically unless ``add_help_option=False`` is passed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.help_option:8
msgid "One or more option names. Defaults to the single value ``\"--help\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_context:1
msgid "Marks a callback as wanting to receive the current context object as first argument."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_obj:1
msgid "Similar to :func:`pass_context`, but only pass the object on the context onwards (:attr:`Context.obj`).  This is useful if that object represents the state of a nested system."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:1
msgid "Given an object type this creates a decorator that will work similar to :func:`pass_obj` but instead of passing the object of the current context, it will find the innermost context of type :func:`object_type`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:6
msgid "This generates a decorator that works roughly like this::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:18
msgid "the type of the object to pass."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.make_pass_decorator:19
msgid "if set to `True`, a new object will be created and remembered on the context if it's not there yet."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_meta_key:1
msgid "Create a decorator that passes a key from :attr:`click.Context.meta` as the first argument to the decorated function."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_meta_key:5
msgid "Key in ``Context.meta`` to pass."
msgstr ""

#: ../../../.venv/lib/site-packages/click/decorators.py:docstring of click.decorators.pass_meta_key:6
msgid "Description of the object being passed, inserted into the decorator's docstring. Defaults to \"the 'key' key from Context.meta\"."
msgstr ""

#: ../../click/docs/api.rst:38
msgid "Utilities"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:1
msgid "Print a message and newline to stdout or a file. This should be used instead of :func:`print` because it provides better support for different data, files, and environments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:5
msgid "Compared to :func:`print`, this does the following:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:7
msgid "Ensures that the output encoding is not misconfigured on Linux."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:8
msgid "Supports Unicode in the Windows console."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:9
msgid "Supports writing to binary outputs, and supports writing bytes to text outputs."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:11
msgid "Supports colors and styles on Windows."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:12
msgid "Removes ANSI color and style codes if the output does not look like an interactive terminal."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:14
msgid "Always flushes the output."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:16
msgid "The string or bytes to output. Other objects are converted to strings."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:18
msgid "The file to write to. Defaults to ``stdout``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:19
msgid "Write to ``stderr`` instead of ``stdout``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:20
msgid "Print a newline after the message. Enabled by default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:21
msgid "Force showing or hiding colors and other styles. By default Click will remove color if the output does not look like an interactive terminal."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:25
msgid "Support Unicode output on the Windows console. Click does not modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()`` will still not support Unicode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:30
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:25
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:18
msgid "Added the ``color`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:33
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:19
msgid "Added the ``err`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.echo:36
msgid "Support colors on Windows if colorama is installed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:1
msgid "This function takes a text and shows it via an environment specific pager on stdout."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:4
msgid "Added the `color` flag."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:7
msgid "the text to page, or alternatively, a generator emitting the text to page."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.echo_via_pager:9
msgid "controls if the pager supports ANSI colors or not.  The default is autodetection."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:1
msgid "Prompts a user for input.  This is a convenience function that can be used to prompt a user for input later."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:4
msgid "If the user aborts the input by sending a interrupt signal, this function will catch it and raise a :exc:`Abort` exception."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:7
msgid "the text to show for the prompt."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:8
msgid "the default value to use if no input happens.  If this is not given it will prompt until it's aborted."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:10
msgid "if this is set to true then the input value will be hidden."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:12
msgid "Prompt a second time to confirm the value. Can be set to a string instead of ``True`` to customize the message."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:15
msgid "the type to use to check the value against."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:16
msgid "if this parameter is provided it's a function that is invoked instead of the type conversion to convert a value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:19
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:11
msgid "a suffix that should be added to the prompt."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:20
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:12
msgid "shows or hides the default value in the prompt."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:21
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:13
msgid "if set to true the file defaults to ``stderr`` instead of ``stdout``, the same as with echo."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:23
msgid "Show or hide choices if the passed type is a Choice. For example if type is a Choice of either day or week, show_choices is true and text is \"Group by\" then the prompt will be \"Group by (day, week): \"."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:28
msgid "``confirmation_prompt`` can be a custom string."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:31
msgid "Added the ``show_choices`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:34
msgid "Added unicode support for cmd.exe on Windows."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.prompt:37
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:8
msgid "Added the `err` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:1
msgid "Prompts for confirmation (yes/no question)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:3
msgid "If the user aborts the input by sending a interrupt signal this function will catch it and raise a :exc:`Abort` exception."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:6
msgid "the question to ask."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:7
msgid "The default value to use when no input is given. If ``None``, repeat until input is given."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:9
msgid "if this is set to `True` a negative answer aborts the exception by raising :exc:`Abort`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.confirm:16
msgid "Repeat until input is given if ``default`` is ``None``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:1
msgid "This function creates an iterable context manager that can be used to iterate over something while showing a progress bar.  It will either iterate over the `iterable` or `length` items (that are counted up).  While iteration happens, this function will print a rendered progress bar to the given `file` (defaults to stdout) and will attempt to calculate remaining time and more.  By default, this progress bar will not be rendered if the file is not a terminal."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:9
msgid "The context manager creates the progress bar.  When the context manager is entered the progress bar is already created.  With every iteration over the progress bar, the iterable passed to the bar is advanced and the bar is updated.  When the context manager exits, a newline is printed and the progress bar is finalized on screen."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:15
msgid "Note: The progress bar is currently designed for use cases where the total progress can be expected to take at least several seconds. Because of this, the ProgressBar class object won't display progress that is considered too fast, and progress where the time between steps is less than a second."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:21
msgid "No printing must happen or the progress bar will be unintentionally destroyed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:24
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.Context.meta:12
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:10
msgid "Example usage::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:30
msgid "Alternatively, if no iterable is specified, one can manually update the progress bar through the `update()` method instead of directly iterating over the progress bar.  The update method accepts the number of steps to increment the bar with::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:40
msgid "The ``update()`` method also takes an optional value specifying the ``current_item`` at the new position. This is useful when used together with ``item_show_func`` to customize the output for each manual step::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:54
msgid "an iterable to iterate over.  If not provided the length is required."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:56
msgid "the number of items to iterate over.  By default the progressbar will attempt to ask the iterator about its length, which might or might not work.  If an iterable is also provided this parameter can be used to override the length.  If an iterable is not provided the progress bar will iterate over a range of that length."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:62
msgid "the label to show next to the progress bar."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:63
msgid "enables or disables the estimated time display.  This is automatically disabled if the length cannot be determined."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:66
msgid "enables or disables the percentage display.  The default is `True` if the iterable has a length or `False` if not."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:69
msgid "enables or disables the absolute position display.  The default is `False`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:71
msgid "A function called with the current item which can return a string to show next to the progress bar. If the function returns ``None`` nothing is shown. The current item can be ``None``, such as when entering and exiting the bar."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:75
msgid "the character to use to show the filled part of the progress bar."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:77
msgid "the character to use to show the non-filled part of the progress bar."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:79
msgid "the format string to use as template for the bar. The parameters in it are ``label`` for the label, ``bar`` for the progress bar and ``info`` for the info section."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:83
msgid "the separator between multiple info items (eta etc.)"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:84
msgid "the width of the progress bar in characters, 0 means full terminal width"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:86
msgid "The file to write to. If this is not a terminal then only the label is printed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:88
msgid "controls if the terminal supports ANSI colors or not.  The default is autodetection.  This is only needed if ANSI codes are included anywhere in the progress bar output which is not the case by default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:92
msgid "Render only when this many updates have completed. This allows tuning for very fast iterators."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:95
msgid "Output is shown even if execution time is less than 0.5 seconds."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:98
msgid "``item_show_func`` shows the current item, not the previous one."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:101
msgid "Labels are echoed if the output is not a TTY. Reverts a change in 7.0 that removed all output."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:105
msgid "Added the ``update_min_steps`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.progressbar:108
msgid "Added the ``color`` parameter. Added the ``update`` method to the object."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.clear:1
msgid "Clears the terminal screen.  This will have the effect of clearing the whole visible space of the terminal and moving the cursor to the top left.  This does not do anything if not connected to a terminal."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:1
msgid "Styles a text with ANSI styles and returns the new string.  By default the styling is self contained which means that at the end of the string a reset code is issued.  This can be prevented by passing ``reset=False``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:6
#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:7
msgid "Examples::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:13
msgid "Supported color names:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:15
msgid "``black`` (might be a gray)"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:16
msgid "``red``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:17
msgid "``green``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:18
msgid "``yellow`` (might be an orange)"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:19
msgid "``blue``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:20
msgid "``magenta``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:21
msgid "``cyan``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:22
msgid "``white`` (might be light gray)"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:23
msgid "``bright_black``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:24
msgid "``bright_red``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:25
msgid "``bright_green``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:26
msgid "``bright_yellow``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:27
msgid "``bright_blue``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:28
msgid "``bright_magenta``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:29
msgid "``bright_cyan``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:30
msgid "``bright_white``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:31
msgid "``reset`` (reset the color code only)"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:33
msgid "If the terminal supports it, color may also be specified as:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:35
msgid "An integer in the interval [0, 255]. The terminal must support 8-bit/256-color mode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:37
msgid "An RGB tuple of three integers in [0, 255]. The terminal must support 24-bit/true-color mode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:40
msgid "See https://en.wikipedia.org/wiki/ANSI_color and https://gist.github.com/XVilka/8346728 for more information."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:43
msgid "the string to style with ansi codes."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:44
msgid "if provided this will become the foreground color."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:45
msgid "if provided this will become the background color."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:46
msgid "if provided this will enable or disable bold mode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:47
msgid "if provided this will enable or disable dim mode.  This is badly supported."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:49
msgid "if provided this will enable or disable underline."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:50
msgid "if provided this will enable or disable overline."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:51
msgid "if provided this will enable or disable italic."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:52
msgid "if provided this will enable or disable blinking."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:53
msgid "if provided this will enable or disable inverse rendering (foreground becomes background and the other way round)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:56
msgid "if provided this will enable or disable striking through text."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:58
msgid "by default a reset-all code is added at the end of the string which means that styles do not carry over.  This can be disabled to compose styles."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:62
msgid "A non-string ``message`` is converted to a string."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:65
msgid "Added support for 256 and RGB color codes."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:68
msgid "Added the ``strikethrough``, ``italic``, and ``overline`` parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.style:72
msgid "Added support for bright colors."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.unstyle:1
msgid "Removes ANSI styling information from a string.  Usually it's not necessary to use this function as Click's echo function will automatically remove styling if necessary."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.unstyle:7
msgid "the text to remove style information from."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:1
msgid "This function combines :func:`echo` and :func:`style` into one call.  As such the following two calls are the same::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:7
msgid "All keyword arguments are forwarded to the underlying functions depending on which one they go with."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:10
msgid "Non-string types will be converted to :class:`str`. However, :class:`bytes` are passed directly to :meth:`echo` without applying style. If you want to style bytes that represent text, call :meth:`bytes.decode` first."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.secho:15
msgid "A non-string ``message`` is converted to a string. Bytes are passed through without style applied."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:1
msgid "Edits the given text in the defined editor.  If an editor is given (should be the full path to the executable but the regular operating system search path is used for finding the executable) it overrides the detected editor.  Optionally, some environment variables can be used.  If the editor is closed without changes, `None` is returned.  In case a file is edited directly the return value is always `None` and `require_save` and `extension` are ignored."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:9
msgid "If the editor cannot be opened a :exc:`UsageError` is raised."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:11
msgid "Note for Windows: to simplify cross-platform usage, the newlines are automatically converted from POSIX to Windows and vice versa.  As such, the message here will have ``\\n`` as newline markers."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:15
msgid "the text to edit."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:16
msgid "optionally the editor to use.  Defaults to automatic detection."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:18
msgid "environment variables to forward to the editor."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:19
msgid "if this is true, then not saving in the editor will make the return value become `None`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:21
msgid "the extension to tell the editor about.  This defaults to `.txt` but changing this might change syntax highlighting."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.edit:24
msgid "if provided it will edit this file instead of the provided text contents.  It will not use a temporary file as an indirection in that case."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:1
msgid "This function launches the given URL (or filename) in the default viewer application for this file type.  If this is an executable, it might launch the executable in a new session.  The return value is the exit code of the launched application.  Usually, ``0`` indicates success."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:14
msgid "URL or filename of the thing to launch."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:15
msgid "Wait for the program to exit before returning. This only works if the launched program blocks. In particular, ``xdg-open`` on Linux does not block."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.launch:18
msgid "if this is set to `True` then instead of launching the application associated with the URL it will attempt to launch a file manager with the file located.  This might have weird effects if the URL does not point to the filesystem."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:1
msgid "Fetches a single character from the terminal and returns it.  This will always return a unicode character and under certain rare circumstances this might return more than one character.  The situations which more than one character is returned is when for whatever reason multiple characters end up in the terminal buffer or standard input was not actually a terminal."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:8
msgid "Note that this will always read from the terminal, even if something is piped into the standard input."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:11
msgid "Note for Windows: in rare cases when typing non-ASCII characters, this function might wait for a second character and then return both at once. This is because certain Unicode characters look like special-key markers."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.getchar:17
msgid "if set to `True`, the character read will also show up on the terminal.  The default is to not show it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:1
msgid "This command stops execution and waits for the user to press any key to continue.  This is similar to the Windows batch \"pause\" command.  If the program is not run through a terminal, this command will instead do nothing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:11
msgid "The message to print before pausing. Defaults to ``\"Press any key to continue...\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.pause:13
msgid "if set to message goes to ``stderr`` instead of ``stdout``, the same as with echo."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.get_terminal_size:1
msgid "Returns the current size of the terminal as tuple in the form ``(width, height)`` in columns and rows."
msgstr ""

#: ../../../.venv/lib/site-packages/click/termui.py:docstring of click.termui.get_terminal_size:4
msgid "Will be removed in Click 8.1. Use :func:`shutil.get_terminal_size` instead."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_binary_stream:1
msgid "Returns a system stream for byte processing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_binary_stream:3
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:6
msgid "the name of the stream to open.  Valid names are ``'stdin'``, ``'stdout'`` and ``'stderr'``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:1
msgid "Returns a system stream for text processing.  This usually returns a wrapped stream around a binary stream returned from :func:`get_binary_stream` but it also can take shortcuts for already correctly configured streams."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:8
msgid "overrides the detected default encoding."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_text_stream:9
msgid "overrides the default error mode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:1
msgid "This is similar to how the :class:`File` works but for manual usage.  Files are opened non lazy by default.  This can open regular files as well as stdin/stdout if ``'-'`` is passed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:5
msgid "If stdin/stdout is returned the stream is wrapped so that the context manager will not close the stream accidentally.  This makes it possible to always use the function like this without having to worry to accidentally close a standard stream::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:15
msgid "the name of the file to open (or ``'-'`` for stdin/stdout)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:16
msgid "the mode in which to open the file."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:17
msgid "the encoding to use."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:18
msgid "the error handling for this file."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:19
msgid "can be flipped to true to open the file lazily."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.open_file:20
msgid "in atomic mode writes go into a temporary file and it's moved on close."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:1
msgid "Returns the config folder for the application.  The default behavior is to return whatever is most appropriate for the operating system."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:4
msgid "To give you an idea, for an app called ``\"Foo Bar\"``, something like the following folders could be returned:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:7
msgid "Mac OS X:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:8
msgid "``~/Library/Application Support/Foo Bar``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:9
msgid "Mac OS X (POSIX):"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:10
#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:14
msgid "``~/.foo-bar``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:11
msgid "Unix:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:12
msgid "``~/.config/foo-bar``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:13
msgid "Unix (POSIX):"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:15
msgid "Windows (roaming):"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:16
msgid "``C:\\Users\\<user>\\AppData\\Roaming\\Foo Bar``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:18
msgid "Windows (not roaming):"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:18
msgid "``C:\\Users\\<user>\\AppData\\Local\\Foo Bar``"
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:22
msgid "the application name.  This should be properly capitalized and can contain whitespace."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:24
msgid "controls if the folder should be roaming or not on Windows. Has no affect otherwise."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.get_app_dir:26
msgid "if this is set to `True` then on any POSIX system the folder will be stored in the home folder with a leading dot instead of the XDG config home or darwin's application support folder."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.format_filename:1
msgid "Formats a filename for user display.  The main purpose of this function is to ensure that the filename can be displayed at all.  This will decode the filename to unicode if necessary in a way that it will not fail.  Optionally, it can shorten the filename to not include the full path to the filename."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.format_filename:7
msgid "formats a filename for UI display.  This will also convert the filename into unicode without failing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/utils.py:docstring of click.utils.format_filename:9
msgid "this optionally shortens the filename to strip of the path that leads up to it."
msgstr ""

#: ../../click/docs/api.rst:79
msgid "Commands"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:1
msgid "The base command implements the minimal API contract of commands. Most code will never use this as it does not implement a lot of useful functionality but it can act as the direct subclass of alternative parsing methods that do not depend on the Click parser."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:6
msgid "For instance, this can be used to bridge Click and other systems like argparse or docopt."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:9
msgid "Because base commands do not implement a lot of the API that other parts of Click take for granted, they are not supported for all operations.  For instance, they cannot be used with the decorators usually and they have no built-in callback system."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:14
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:5
msgid "Added the `context_settings` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:17
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:12
msgid "the name of the command to use unless a group overrides it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand:18
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:13
msgid "an optional dictionary with defaults that are passed to the context object."
msgstr ""

#: ../../docstring of click.BaseCommand.allow_extra_args:1
msgid "the default for the :attr:`Context.allow_extra_args` flag."
msgstr ""

#: ../../docstring of click.BaseCommand.allow_interspersed_args:1
msgid "the default for the :attr:`Context.allow_interspersed_args` flag."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:1
msgid "The context class to create with :meth:`make_context`."
msgstr ""

#: ../../docstring of click.BaseCommand.context_settings:1
msgid "an optional dictionary with defaults passed to the context."
msgstr ""

#: ../../docstring of click.BaseCommand.ignore_unknown_options:1
msgid "the default for the :attr:`Context.ignore_unknown_options` flag."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.invoke:1
msgid "Given a context, this invokes the command.  The default implementation is raising a not implemented error."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:1
msgid "This is the way to invoke a script with all the bells and whistles as a command line application.  This will always terminate the application after a call.  If this is not wanted, ``SystemExit`` needs to be caught."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:6
msgid "This method is also available by directly calling the instance of a :class:`Command`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:9
msgid "the arguments that should be used for parsing.  If not provided, ``sys.argv[1:]`` is used."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:11
msgid "the program name that should be used.  By default the program name is constructed by taking the file name from ``sys.argv[0]``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:14
msgid "the environment variable that controls the bash completion support.  The default is ``\"_<prog_name>_COMPLETE\"`` with prog_name in uppercase."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:18
msgid "the default behavior is to invoke the script in standalone mode.  Click will then handle exceptions and convert them into error messages and the function will never return but shut down the interpreter.  If this is set to `False` they will be propagated to the caller and the return value of this function is the return value of :meth:`invoke`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:27
msgid "Expand glob patterns, user dir, and env vars in command line args on Windows."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:29
msgid "extra keyword arguments are forwarded to the context constructor.  See :class:`Context` for more information."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:32
msgid "Added the ``windows_expand_args`` parameter to allow disabling command line arg expansion on Windows."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:36
msgid "When taking arguments from ``sys.argv`` on Windows, glob patterns, user dir, and env vars are expanded."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.main:40
msgid "Added the ``standalone_mode`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:1
msgid "This function when given an info name and arguments will kick off the parsing and create a new :class:`Context`.  It does not invoke the actual command callback though."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:5
msgid "To quickly customize the context class used without overriding this method, set the :attr:`context_class` attribute."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:8
msgid "the info name for this invocation.  Generally this is the most descriptive name for the script or command.  For the toplevel script it's usually the name of the script, for commands below it it's the name of the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:13
msgid "the arguments to parse as list of strings."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:14
msgid "the parent context if available."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:15
msgid "extra keyword arguments forwarded to the context constructor."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.make_context:18
msgid "Added the :attr:`context_class` attribute."
msgstr ""

#: ../../docstring of click.BaseCommand.name:1
msgid "the name the command thinks it has.  Upon registering a command on a :class:`Group` the group will default the command name with this information.  You should instead use the :class:`Context`\\'s :attr:`~Context.info_name` attribute."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.parse_args:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.parse_args:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.parse_args:1
msgid "Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary. This is automatically invoked by :meth:`make_context`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:1
msgid "Return a list of completions for the incomplete value. Looks at the names of chained multi-commands."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:4
msgid "Any command could be part of a chained multi-command, so sibling commands are valid at any point during command completion. Other command classes will return more completions."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:8
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.shell_complete:4
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.shell_complete:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.shell_complete:6
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:7
msgid "Invocation context for this command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.shell_complete:9
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.shell_complete:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.shell_complete:6
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.shell_complete:7
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:9
#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completions:6
msgid "Value being completed. May be empty."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.to_info_dict:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.to_info_dict:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.to_info_dict:1
msgid "Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire structure below this command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.to_info_dict:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.to_info_dict:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.to_info_dict:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.to_info_dict:4
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.to_info_dict:4
msgid "Use :meth:`click.Context.to_info_dict` to traverse the entire CLI structure."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.BaseCommand.to_info_dict:8
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.to_info_dict:8
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.to_info_dict:8
msgid "A :class:`Context` representing this command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:1
msgid "Commands are the basic building block of command line interfaces in Click.  A basic command handles command line parsing and might dispatch more parsing to commands nested below it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:7
msgid "Added repr showing the command name"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:9
msgid "Added the `no_args_is_help` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:15
msgid "the callback to invoke.  This is optional."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:16
msgid "the parameters to register with this command.  This can be either :class:`Option` or :class:`Argument` objects."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:18
msgid "the help string to use for this command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:19
msgid "like the help string but it's printed at the end of the help page after everything else."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:21
msgid "the short help to use for this command.  This is shown on the command listing of the parent command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:23
msgid "by default each command registers a ``--help`` option.  This can be disabled by this parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:25
msgid "this controls what happens if no arguments are provided.  This option is disabled by default. If enabled this will add ``--help`` as argument if no arguments are passed"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:29
msgid "hide this command from help outputs."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command:31
msgid "issues a message indicating that the command is deprecated."
msgstr ""

#: ../../docstring of click.Command.callback:1
msgid "the callback to execute when the command fires.  This might be `None` in which case nothing happens."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.collect_usage_pieces:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.collect_usage_pieces:1
msgid "Returns all the pieces that go into the usage line and returns it as a list of strings."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_epilog:1
msgid "Writes the epilog into the formatter if it exists."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:1
msgid "Writes the help into the formatter if it exists."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:3
msgid "This is a low-level method called by :meth:`get_help`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:5
msgid "This calls the following methods:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:7
msgid ":meth:`format_usage`"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:8
msgid ":meth:`format_help_text`"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:9
msgid ":meth:`format_options`"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help:10
msgid ":meth:`format_epilog`"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_help_text:1
msgid "Writes the help text to the formatter if it exists."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_options:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_options:1
msgid "Writes all the options into the formatter if they exist."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_usage:1
msgid "Writes the usage line into the formatter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.format_usage:3
msgid "This is a low-level method called by :meth:`get_usage`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help:1
msgid "Formats the help into a string and returns it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help:3
msgid "Calls :meth:`format_help` internally."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option:1
msgid "Returns the help option object."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_help_option_names:1
msgid "Returns the names for the help option."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_short_help_str:1
msgid "Gets short help for the command or makes it by shortening the long help string."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_usage:1
msgid "Formats the usage line into a string and returns it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.get_usage:3
msgid "Calls :meth:`format_usage` internally."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.invoke:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.invoke:1
msgid "Given a context, this invokes the attached callback (if it exists) in the right way."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.make_parser:1
msgid "Creates the underlying option parser for this command."
msgstr ""

#: ../../docstring of click.Command.params:1
msgid "the list of parameters for this command in the order they should show up in the help page and execute.  Eager parameters will automatically be handled before non eager ones."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Command.shell_complete:1
msgid "Return a list of completions for the incomplete value. Looks at the names of options and chained multi-commands."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:1
msgid "A multi command is the basic implementation of a command that dispatches to subcommands.  The most common version is the :class:`Group`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:5
msgid "this controls how the multi command itself is invoked.  By default it's only invoked if a subcommand is provided."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:8
msgid "this controls what happens if no arguments are provided.  This option is enabled by default if `invoke_without_command` is disabled or disabled if it's enabled.  If enabled this will add ``--help`` as argument if no arguments are passed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:14
msgid "the string that is used in the documentation to indicate the subcommand place."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:16
msgid "if this is set to `True` chaining of multiple subcommands is enabled.  This restricts the form of commands in that they cannot have optional arguments but it allows multiple commands to be chained together."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand:20
msgid "The result callback to attach to this multi command. This can be set or changed later with the :meth:`result_callback` decorator."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.format_commands:1
msgid "Extra format methods for multi methods that adds all the commands after the options."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.get_command:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.get_command:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.get_command:1
msgid "Given a context and a command name, this returns a :class:`Command` object if it exists or returns `None`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.list_commands:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.list_commands:1
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.list_commands:1
msgid "Returns a list of subcommand names in the order they should appear."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:1
msgid "Adds a result callback to the command.  By default if a result callback is already registered this will chain them but this can be disabled with the `replace` parameter.  The result callback is invoked with the return value of the subcommand (or the list of return values from all subcommands if chaining is enabled) as well as the parameters as they would be passed to the main callback."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:9
msgid "Example::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:20
msgid "if set to `True` an already existing result callback will be removed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.result_callback:23
msgid "Renamed from ``resultcallback``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.MultiCommand.shell_complete:1
msgid "Return a list of completions for the incomplete value. Looks at the names of options, subcommands, and chained multi-commands."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:1
msgid "A group allows a command to have subcommands attached. This is the most common way to implement nesting in Click."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:4
msgid "The name of the group command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:5
msgid "A dict mapping names to :class:`Command` objects. Can also be a list of :class:`Command`, which will use :attr:`Command.name` to create the dict."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:8
msgid "Other command arguments described in :class:`MultiCommand`, :class:`Command`, and :class:`BaseCommand`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group:12
msgid "The ``commmands`` argument can be a list of command objects."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.add_command:1
msgid "Registers another :class:`Command` with this group.  If the name is not provided, the name of the command is used."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.command:1
msgid "A shortcut decorator for declaring and attaching a command to the group. This takes the same arguments as :func:`command` and immediately registers the created command with this group by calling :meth:`add_command`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.command:6
msgid "To customize the command class used, set the :attr:`command_class` attribute."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.command:9
msgid "Added the :attr:`command_class` attribute."
msgstr ""

#: ../../docstring of click.Group.command_class:1
msgid "If set, this is used by the group's :meth:`command` decorator as the default :class:`Command` class. This is useful to make all subcommands use a custom command class."
msgstr ""

#: ../../docstring of click.Group.commands:1
msgid "The registered subcommands by their exported names."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.group:1
msgid "A shortcut decorator for declaring and attaching a group to the group. This takes the same arguments as :func:`group` and immediately registers the created group with this group by calling :meth:`add_command`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.group:6
msgid "To customize the group class used, set the :attr:`group_class` attribute."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Group.group:9
msgid "Added the :attr:`group_class` attribute."
msgstr ""

#: ../../docstring of click.Group.group_class:1
msgid "If set, this is used by the group's :meth:`group` decorator as the default :class:`Group` class. This is useful to make all subgroups use a custom group class."
msgstr ""

#: ../../docstring of click.Group.group_class:5
msgid "If set to the special value :class:`type` (literally ``group_class = type``), this group's class will be used as the default class. This makes a custom group class continue to make custom groups."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection:1
msgid "A command collection is a multi command that merges multiple multi commands together into one.  This is a straightforward implementation that accepts a list of different multi commands as sources and provides all the commands for each of them."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.CommandCollection.add_source:1
msgid "Adds a new multi command to the chain dispatcher."
msgstr ""

#: ../../docstring of click.CommandCollection.sources:1
msgid "The list of registered multi commands."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:1
msgid "A parameter to a command comes in two versions: they are either :class:`Option`\\s or :class:`Argument`\\s.  Other subclasses are currently not supported by design as some of the internals for parsing are intentionally not finalized."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:6
msgid "Some settings are supported by both options and arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:8
msgid "the parameter declarations for this option or argument.  This is a list of flags or argument names."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:11
msgid "the type that should be used.  Either a :class:`ParamType` or a Python type.  The later is converted into the former automatically if supported."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:14
msgid "controls if this is optional or not."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:15
msgid "the default value if omitted.  This can also be a callable, in which case it's invoked when the default is needed without any arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:18
msgid "A function to further process or validate the value after type conversion. It is called as ``f(ctx, param, value)`` and must return the value. It is called for all sources, including prompts."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:22
msgid "the number of arguments to match.  If not ``1`` the return value is a tuple instead of single value.  The default for nargs is ``1`` (except if the type is a tuple, then it's the arity of the tuple). If ``nargs=-1``, all remaining parameters are collected."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:27
msgid "how the value is represented in the help page."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:28
msgid "if this is `True` then the value is passed onwards to the command callback and stored on the context, otherwise it's skipped."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:31
msgid "eager values are processed before non eager ones.  This should not be set for arguments or it will inverse the order of processing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:34
msgid "a string or list of strings that are environment variables that should be checked."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:36
msgid "A function that returns custom shell completions. Used instead of the param's type completion if given. Takes ``ctx, param, incomplete`` and must return a list of :class:`~click.shell_completion.CompletionItem` or a list of strings."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:42
msgid "``process_value`` validates required parameters and bounded ``nargs``, and invokes the parameter callback before returning the value. This allows the callback to validate prompts. ``full_process_value`` is removed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:48
msgid "``autocompletion`` is renamed to ``shell_complete`` and has new semantics described above. The old name is deprecated and will be removed in 8.1, until then it will be wrapped to match the new requirements."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:54
msgid "For ``multiple=True, nargs>1``, the default must be a list of tuples."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:58
msgid "Setting a default is no longer required for ``nargs>1``, it will default to ``None``. ``multiple=True`` or ``nargs=-1`` will default to ``()``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:63
msgid "Empty environment variables are ignored rather than taking the empty string value. This makes it possible for scripts to clear variables if they can't unset them."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter:68
msgid "Changed signature for parameter callback to also be passed the parameter. The old callback format will still work, but it will raise a warning to give you a chance to migrate the code easier."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:1
msgid "Get the default for the parameter. Tries :meth:`Context.lookup_value` first, then the local default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:4
msgid "Current context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:5
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:4
msgid "If the default is a callable, call it. Disable to return the callable instead."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:8
msgid "Type casting can fail in resilient parsing mode. Invalid defaults will not prevent showing help text."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:12
msgid "Looks at ``ctx.default_map`` first."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_default:15
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:7
msgid "Added the ``call`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.get_error_hint:1
msgid "Get a stringified version of the param for use in error messages to indicate which param caused the error."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.Parameter.human_readable_name:1
msgid "Returns the human readable name of this parameter.  This is the same as the name for options, but the metavar for arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.shell_complete:1
msgid "Return a list of completions for the incomplete value. If a ``shell_complete`` function was given during init, it is used. Otherwise, the :attr:`type` :meth:`~click.types.ParamType.shell_complete` function is used."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.to_info_dict:1
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.to_info_dict:1
msgid "Gather information that could be useful for a tool generating user-facing documentation."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Parameter.type_cast_value:1
msgid "Convert and validate a value against the option's :attr:`type`, :attr:`multiple`, and :attr:`nargs`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:1
msgid "Options are usually optional values on the command line and have some extra features that arguments don't have."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:4
msgid "All other parameters are passed onwards to the parameter constructor."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:6
msgid "controls if the default value should be shown on the help page. Normally, defaults are not shown. If this value is a string, it shows the string instead of the value. This is particularly useful for dynamic options."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:10
msgid "controls if an environment variable should be shown on the help page.  Normally, environment variables are not shown."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:13
msgid "if set to `True` or a non empty string then the user will be prompted for input.  If set to `True` the prompt will be the option name capitalized."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:16
msgid "Prompt a second time to confirm the value if it was prompted for. Can be set to a string instead of ``True`` to customize the message."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:19
msgid "If set to ``False``, the user will be prompted for input only when the option was specified as a flag without a value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:22
msgid "if this is `True` then the input on the prompt will be hidden from the user.  This is useful for password input."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:25
msgid "forces this option to act as a flag.  The default is auto detection."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:27
msgid "which value should be used for this flag if it's enabled.  This is set to a boolean automatically if the option string contains a slash to mark two options."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:30
msgid "if this is set to `True` then the argument is accepted multiple times and recorded.  This is similar to ``nargs`` in how it works but supports arbitrary number of arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:34
msgid "this flag makes an option increment an integer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:35
msgid "if this is enabled then the value of this parameter will be pulled from an environment variable in case a prefix is defined on the context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:39
msgid "the help string."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:40
msgid "hide this option from help outputs."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Option:42
msgid "``type`` is detected from ``flag_value`` if given."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Argument:1
msgid "Arguments are positional parameters to a command.  They generally provide fewer features than options but can have infinite ``nargs`` and are required by default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Argument:5
msgid "All parameters are passed onwards to the parameter constructor."
msgstr ""

#: ../../click/docs/api.rst:107
msgid "Context"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:1
msgid "The context is a special internal object that holds state relevant for the script execution at every single level.  It's normally invisible to commands unless they opt-in to getting access to it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:5
msgid "The context is useful as it can pass internal objects around and can control special execution features such as reading data from environment variables."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:9
msgid "A context can be used as context manager in which case it will call :meth:`close` on teardown."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:12
msgid "the command class for this context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:13
msgid "the parent context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:14
msgid "the info name for this invocation.  Generally this is the most descriptive name for the script or command.  For the toplevel script it is usually the name of the script, for commands below it it's the name of the script."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:19
msgid "an arbitrary object of user data."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:20
msgid "the prefix to use for automatic environment variables.  If this is `None` then reading from environment variables is disabled.  This does not affect manually set environment variables which are always read."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:25
msgid "a dictionary (like object) with default values for parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:27
msgid "the width of the terminal.  The default is inherit from parent context.  If no context defines the terminal width then auto detection will be applied."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:31
msgid "the maximum width for content rendered by Click (this currently only affects help pages).  This defaults to 80 characters if not overridden.  In other words: even if the terminal is larger than that, Click will not format things wider than 80 characters by default.  In addition to that, formatters might add some safety mapping on the right."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:39
msgid "if this flag is enabled then Click will parse without any interactivity or callback invocation.  Default values will also be ignored.  This is useful for implementing things such as completion support."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:44
msgid "if this is set to `True` then extra arguments at the end will not raise an error and will be kept on the context.  The default is to inherit from the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:48
msgid "if this is set to `False` then options and arguments cannot be mixed.  The default is to inherit from the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:51
msgid "instructs click to ignore options it does not know and keeps them for later processing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:54
msgid "optionally a list of strings that define how the default help parameter is named.  The default is ``['--help']``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:57
msgid "an optional function that is used to normalize tokens (options, choices, etc.).  This for instance can be used to implement case insensitive behavior."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:61
msgid "controls if the terminal supports ANSI colors or not.  The default is autodetection.  This is only needed if ANSI codes are used in texts that Click prints which is by default not the case.  This for instance would affect help output."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:66
msgid "Show defaults for all options. If not set, defaults to the value from a parent context. Overrides an option's ``show_default`` argument."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:70
msgid "The ``show_default`` parameter defaults to the value from the parent context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:74
msgid "Added the ``show_default`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:77
msgid "Added the ``color``, ``ignore_unknown_options``, and ``max_content_width`` parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:81
msgid "Added the ``allow_extra_args`` and ``allow_interspersed_args`` parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context:85
msgid "Added the ``resilient_parsing``, ``help_option_names``, and ``token_normalize_func`` parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.abort:1
msgid "Aborts the script."
msgstr ""

#: ../../docstring of click.Context.allow_extra_args:1
msgid "Indicates if the context allows extra args or if it should fail on parsing."
msgstr ""

#: ../../docstring of click.Context.allow_interspersed_args:1
msgid "Indicates if the context allows mixing of arguments and options or not."
msgstr ""

#: ../../docstring of click.Context.args:1
msgid "the leftover arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.call_on_close:1
msgid "Register a function to be called when the context tears down."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.call_on_close:3
msgid "This can be used to close resources opened during the script execution. Resources that support Python's context manager protocol which would be used in a ``with`` statement should be registered with :meth:`with_resource` instead."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.call_on_close:8
msgid "The function to execute on teardown."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.close:1
msgid "Invoke all close callbacks registered with :meth:`call_on_close`, and exit all context managers entered with :meth:`with_resource`."
msgstr ""

#: ../../docstring of click.Context.color:1
msgid "Controls if styling output is wanted or not."
msgstr ""

#: ../../docstring of click.Context.command:1
msgid "the :class:`Command` for this context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.Context.command_path:1
msgid "The computed command path.  This is used for the ``usage`` information on the help page.  It's automatically created by combining the info names of the chain of contexts to the root."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.ensure_object:1
msgid "Like :meth:`find_object` but sets the innermost object to a new instance of `object_type` if it does not exist."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.exit:1
msgid "Exits the application with a given exit code."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.fail:1
msgid "Aborts the execution of the program with a specific error message."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.fail:4
msgid "the error message to fail with."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.find_object:1
msgid "Finds the closest object of a given type."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.find_root:1
msgid "Finds the outermost context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.forward:1
msgid "Similar to :meth:`invoke` but fills in default keyword arguments from the current context if the other command expects it.  This cannot invoke callbacks directly, only other commands."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.forward:5
msgid "All ``kwargs`` are tracked in :attr:`params` so they will be passed if ``forward`` is called at multiple levels."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_help:1
msgid "Helper method to get formatted help page for the current context and command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:1
msgid "Get the source of a parameter. This indicates the location from which the value of the parameter was obtained."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:4
msgid "This can be useful for determining when a user specified a value on the command line that is the same as the default value. It will be :attr:`~click.core.ParameterSource.DEFAULT` only if the value was actually taken from the default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:9
#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.set_parameter_source:4
msgid "The name of the parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_parameter_source:12
msgid "Returns ``None`` if the parameter was not provided from any source."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.get_usage:1
msgid "Helper method to get formatted usage string for the current context and command."
msgstr ""

#: ../../docstring of click.Context.help_option_names:1
msgid "The names for the help options."
msgstr ""

#: ../../docstring of click.Context.ignore_unknown_options:1
msgid "Instructs click to ignore options that a command does not understand and will store it on the context for later processing.  This is primarily useful for situations where you want to call into external programs.  Generally this pattern is strongly discouraged because it's not possibly to losslessly forward all arguments."
msgstr ""

#: ../../docstring of click.Context.info_name:1
msgid "the descriptive information name"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:1
msgid "Invokes a command callback in exactly the way it expects.  There are two ways to invoke this method:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:4
msgid "the first argument can be a callback and all other arguments and keyword arguments are forwarded directly to the function."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:6
msgid "the first argument is a click command object.  In that case all arguments are forwarded as well but proper click parameters (options and click arguments) must be keyword arguments and Click will fill in defaults."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:11
msgid "Note that before Click 3.2 keyword arguments were not properly filled in against the intention of this code and no context was created.  For more information about this change and why it was done in a bugfix release see :ref:`upgrade-to-3.2`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.invoke:16
msgid "All ``kwargs`` are tracked in :attr:`params` so they will be passed if :meth:`forward` is called at multiple levels."
msgstr ""

#: ../../docstring of click.Context.invoked_subcommand:1
msgid "This flag indicates if a subcommand is going to be executed. A group callback can use this information to figure out if it's being executed directly or because the execution flow passes onwards to a subcommand. By default it's None, but it can be the name of the subcommand to execute."
msgstr ""

#: ../../docstring of click.Context.invoked_subcommand:7
msgid "If chaining is enabled this will be set to ``'*'`` in case any commands are executed.  It is however not possible to figure out which ones.  If you require this knowledge you should use a :func:`result_callback`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:1
msgid "Get the default for a parameter from :attr:`default_map`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.lookup_default:3
msgid "Name of the parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.make_formatter:1
msgid "Creates the :class:`~click.HelpFormatter` for the help and usage output."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.make_formatter:4
msgid "To quickly customize the formatter class used without overriding this method, set the :attr:`formatter_class` attribute."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.make_formatter:7
msgid "Added the :attr:`formatter_class` attribute."
msgstr ""

#: ../../docstring of click.Context.max_content_width:1
msgid "The maximum width of formatted content (None implies a sensible default which is 80 for most things)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.Context.meta:1
msgid "This is a dictionary which is shared with all the contexts that are nested.  It exists so that click utilities can store some state here if they need to.  It is however the responsibility of that code to manage this dictionary well."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.Context.meta:6
msgid "The keys are supposed to be unique dotted strings.  For instance module paths are a good choice for it.  What is stored in there is irrelevant for the operation of click.  However what is important is that code that places data here adheres to the general semantics of the system."
msgstr ""

#: ../../docstring of click.Context.obj:1
msgid "the user object stored."
msgstr ""

#: ../../docstring of click.Context.params:1
msgid "Map of parameter names to their parsed values. Parameters with ``expose_value=False`` are not stored."
msgstr ""

#: ../../docstring of click.Context.parent:1
msgid "the parent context or `None` if none exists."
msgstr ""

#: ../../docstring of click.Context.protected_args:1
msgid "protected arguments.  These are arguments that are prepended to `args` when certain parsing scenarios are encountered but must be never propagated to another arguments.  This is used to implement nested parsing."
msgstr ""

#: ../../docstring of click.Context.resilient_parsing:1
msgid "Indicates if resilient parsing is enabled.  In that case Click will do its best to not cause any failures and default values will be ignored. Useful for completion."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:1
msgid "This helper method can be used with the context object to promote it to the current thread local (see :func:`get_current_context`). The default behavior of this is to invoke the cleanup functions which can be disabled by setting `cleanup` to `False`.  The cleanup functions are typically used for things such as closing file handles."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:7
msgid "If the cleanup is intended the context object can also be directly used as a context manager."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:15
msgid "This is equivalent::"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.scope:22
msgid "controls if the cleanup functions should be run or not.  The default is to run these functions.  In some situations the context only wants to be temporarily pushed in which case this can be disabled. Nested pushes automatically defer the cleanup."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.set_parameter_source:1
msgid "Set the source of a parameter. This indicates the location from which the value of the parameter was obtained."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.set_parameter_source:5
msgid "A member of :class:`~click.core.ParameterSource`."
msgstr ""

#: ../../docstring of click.Context.show_default:1
msgid "Show option default values when formatting help text."
msgstr ""

#: ../../docstring of click.Context.terminal_width:1
msgid "The width of the terminal (None is autodetection)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.to_info_dict:1
msgid "Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire CLI structure."
msgstr ""

#: ../../docstring of click.Context.token_normalize_func:1
msgid "An optional normalization function for tokens.  This is options, choices, commands etc."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:1
msgid "Register a resource as if it were used in a ``with`` statement. The resource will be cleaned up when the context is popped."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:5
msgid "Uses :meth:`contextlib.ExitStack.enter_context`. It calls the resource's ``__enter__()`` method and returns the result. When the context is popped, it closes the stack, which calls the resource's ``__exit__()`` method."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:10
msgid "To register a cleanup function for something that isn't a context manager, use :meth:`call_on_close`. Or use something from :mod:`contextlib` to turn it into a context manager first."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:22
msgid "The context manager to enter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:0
msgid "Returns"
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.Context.with_resource:23
msgid "Whatever ``context_manager.__enter__()`` returns."
msgstr ""

#: ../../../.venv/lib/site-packages/click/globals.py:docstring of click.globals.get_current_context:1
msgid "Returns the current click context.  This can be used as a way to access the current context object from anywhere.  This is a more implicit alternative to the :func:`pass_context` decorator.  This function is primarily useful for helpers such as :func:`echo` which might be interested in changing its behavior based on the current context."
msgstr ""

#: ../../../.venv/lib/site-packages/click/globals.py:docstring of click.globals.get_current_context:7
msgid "To push the current context, :meth:`Context.scope` can be used."
msgstr ""

#: ../../../.venv/lib/site-packages/click/globals.py:docstring of click.globals.get_current_context:11
msgid "if set to `True` the return value is `None` if no context is available.  The default behavior is to raise a :exc:`RuntimeError`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.ParameterSource:1
msgid "This is an :class:`~enum.Enum` that indicates the source of a parameter's value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.ParameterSource:4
msgid "Use :meth:`click.Context.get_parameter_source` to get the source for a parameter by name."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.ParameterSource:7
msgid "Use :class:`~enum.Enum` and drop the ``validate`` method."
msgstr ""

#: ../../../.venv/lib/site-packages/click/core.py:docstring of click.core.ParameterSource:10
msgid "Added the ``PROMPT`` value."
msgstr ""

#: ../../docstring of click.core.ParameterSource.COMMANDLINE:1
msgid "The value was provided by the command line args."
msgstr ""

#: ../../docstring of click.core.ParameterSource.ENVIRONMENT:1
msgid "The value was provided with an environment variable."
msgstr ""

#: ../../docstring of click.core.ParameterSource.DEFAULT:1
msgid "Used the default specified by the parameter."
msgstr ""

#: ../../docstring of click.core.ParameterSource.DEFAULT_MAP:1
msgid "Used a default provided by :attr:`Context.default_map`."
msgstr ""

#: ../../docstring of click.core.ParameterSource.PROMPT:1
msgid "Used a prompt to confirm a default or provide a value."
msgstr ""

#: ../../click/docs/api.rst:120
msgid "Types"
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:1
msgid "Declares a parameter to be a file for reading or writing.  The file is automatically closed once the context tears down (after the command finished working)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:5
msgid "Files can be opened for reading or writing.  The special value ``-`` indicates stdin or stdout depending on the mode."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:8
msgid "By default, the file is opened for reading text data, but it can also be opened in binary mode or for writing.  The encoding parameter can be used to force a specific encoding."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:12
msgid "The `lazy` flag controls if the file should be opened immediately or upon first IO. The default is to be non-lazy for standard input and output streams as well as files opened for reading, `lazy` otherwise. When opening a file lazily for reading, it is still opened temporarily for validation, but will not be held open until first IO. lazy is mainly useful when opening for writing to avoid creating the file until it is needed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:19
msgid "Starting with Click 2.0, files can also be opened atomically in which case all writes go into a separate file in the same folder and upon completion the file will be moved over to the original location.  This is useful if a file regularly read by other users is modified."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.File:24
msgid "See :ref:`file-args` for more information."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:1
msgid "The path type is similar to the :class:`File` type but it performs different checks.  First of all, instead of returning an open file handle it returns just the filename.  Secondly, it can perform various basic checks about what the file or directory should be."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:6
msgid "if set to true, the file or directory needs to exist for this value to be valid.  If this is not required and a file does indeed not exist, then all further checks are silently skipped."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:10
msgid "controls if a file is a possible value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:11
msgid "controls if a directory is a possible value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:12
msgid "if true, a writable check is performed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:13
msgid "if true, a readable check is performed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:14
msgid "if this is true, then the path is fully resolved before the value is passed onwards.  This means that it's absolute and symlinks are resolved.  It will not expand a tilde-prefix, as this is supposed to be done by the shell only."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:19
msgid "If this is set to `True`, a single dash to indicate standard streams is permitted."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:21
msgid "Convert the incoming path value to this type. If ``None``, keep Python's default, which is ``str``. Useful to convert to :class:`pathlib.Path`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:25
msgid "Allow passing ``type=pathlib.Path``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Path:28
msgid "Added the ``allow_dash`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:1
msgid "The choice type allows a value to be checked against a fixed set of supported values. All of these values have to be strings."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:4
msgid "You should only pass a list or tuple of choices. Other iterables (like generators) may lead to surprising results."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:7
msgid "The resulting value will always be one of the originally passed choices regardless of ``case_sensitive`` or any ``ctx.token_normalize_func`` being specified."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:11
msgid "See :ref:`choice-opts` for an example."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Choice:13
msgid "Set to false to make choices case insensitive. Defaults to true."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:1
msgid "Restrict an :data:`click.INT` value to a range of accepted values. See :ref:`ranges`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:4
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:4
msgid "If ``min`` or ``max`` are not passed, any value is accepted in that direction. If ``min_open`` or ``max_open`` are enabled, the corresponding boundary is not included in the range."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:8
msgid "If ``clamp`` is enabled, a value outside the range is clamped to the boundary instead of failing."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.IntRange:11
#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:12
msgid "Added the ``min_open`` and ``max_open`` parameters."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:1
msgid "Restrict a :data:`click.FLOAT` value to a range of accepted values. See :ref:`ranges`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.FloatRange:8
msgid "If ``clamp`` is enabled, a value outside the range is clamped to the boundary instead of failing. This is not supported if either boundary is marked ``open``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:1
msgid "The DateTime type converts date strings into `datetime` objects."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:3
msgid "The format strings which are checked are configurable, but default to some common (non-timezone aware) ISO 8601 formats."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:6
msgid "When specifying *DateTime* formats, you should only pass a list or a tuple. Other iterables, like generators, may lead to surprising results."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:9
msgid "The format strings are processed using ``datetime.strptime``, and this consequently defines the format strings which are allowed."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:12
msgid "Parsing is tried using each format, in order, and the first format which parses successfully is used."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.DateTime:15
msgid "A list or tuple of date format strings, in the order in which they should be tried. Defaults to ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``, ``'%Y-%m-%d %H:%M:%S'``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:1
msgid "The default behavior of Click is to apply a type on a value directly. This works well in most cases, except for when `nargs` is set to a fixed count and different types should be used for different items.  In this case the :class:`Tuple` type can be used.  This type can only be used if `nargs` is set to a fixed number."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:7
msgid "For more information see :ref:`tuple-type`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:9
msgid "This can be selected by using a Python tuple literal as a type."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.Tuple:11
msgid "a list of types that should be used for the tuple items."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:1
msgid "Represents the type of a parameter. Validates and converts values from the command line or Python into the correct type."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:4
msgid "To implement a custom type, subclass and implement at least the following:"
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:7
msgid "The :attr:`name` class attribute must be set."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:8
msgid "Calling an instance of the type with ``None`` must return ``None``. This is already implemented by default."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:10
msgid ":meth:`convert` must convert string values to the correct type."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:11
msgid ":meth:`convert` must accept values that are already the correct type."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType:13
msgid "It must be able to convert a value if the ``ctx`` and ``param`` arguments are ``None``. This can occur when converting prompt input."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:1
msgid "Convert the value to the correct type. This is not called if the value is ``None`` (the missing value)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:4
msgid "This must accept string values from the command line, as well as values that are already the correct type. It may also convert other compatible types."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:8
msgid "The ``param`` and ``ctx`` arguments may be ``None`` in certain situations, such as when converting prompt input."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:11
msgid "If the value cannot be converted, call :meth:`fail` with a descriptive message."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:14
msgid "The value to convert."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:15
msgid "The parameter that is using this type to convert its value. May be ``None``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.convert:17
msgid "The current context that arrived at this value. May be ``None``."
msgstr ""

#: ../../docstring of click.ParamType.envvar_list_splitter:1
msgid "if a list of this type is expected and the value is pulled from a string environment variable, this is what splits it up.  `None` means any whitespace.  For all parameters the general rule is that whitespace splits them up.  The exception are paths and files which are split by ``os.path.pathsep`` by default (\":\" on Unix and \";\" on Windows)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.fail:1
msgid "Helper method to fail with an invalid value message."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_metavar:1
msgid "Returns the metavar default for this param if it provides one."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.get_missing_message:1
msgid "Optionally might return extra information about a missing parameter."
msgstr ""

#: ../../docstring of click.ParamType.name:1
msgid "the descriptive name of this type"
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:1
msgid "Return a list of :class:`~click.shell_completion.CompletionItem` objects for the incomplete value. Most types do not provide completions, but some do, and this allows custom types to provide custom completions as well."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.shell_complete:8
msgid "The parameter that is requesting completion."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.split_envvar_value:1
msgid "Given a value from an environment variable this splits it up into small chunks depending on the defined envvar list splitter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/types.py:docstring of click.types.ParamType.split_envvar_value:4
msgid "If the splitter is set to `None`, which means that whitespace splits, then leading and trailing whitespace is ignored.  Otherwise, leading and trailing splitters usually lead to empty items being included."
msgstr ""

#: ../../click/docs/api.rst:152
msgid "Exceptions"
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.ClickException:1
msgid "An exception that Click can handle and show to the user."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.Abort:1
msgid "An internal signalling exception that signals Click to abort."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.UsageError:1
msgid "An internal exception that signals a usage error.  This typically aborts any further handling."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.UsageError:4
msgid "the error message to display."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.UsageError:5
msgid "optionally the context that caused this error.  Click will fill in the context automatically in some situations."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadParameter:1
msgid "An exception that formats out a standardized error message for a bad parameter.  This is useful when thrown from a callback or type as Click will attach contextual information to it (for instance, which parameter it is)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadParameter:8
msgid "the parameter object that caused this error.  This can be left out, and Click will attach this info itself if possible."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadParameter:11
msgid "a string that shows up as parameter name.  This can be used as alternative to `param` in cases where custom validation should happen.  If it is a string it's used as such, if it's a list then each item is quoted and separated."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.FileError:1
msgid "Raised if a file cannot be opened."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.NoSuchOption:1
msgid "Raised if click attempted to handle an option that does not exist."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadOptionUsage:1
msgid "Raised if an option is generally supplied but the use of the option was incorrect.  This is for instance raised if the number of arguments for an option is not correct."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadOptionUsage:7
msgid "the name of the option being used incorrectly."
msgstr ""

#: ../../../.venv/lib/site-packages/click/exceptions.py:docstring of click.exceptions.BadArgumentUsage:1
msgid "Raised if an argument is generally supplied but the use of the argument was incorrect.  This is for instance raised if the number of values for an argument is not correct."
msgstr ""

#: ../../click/docs/api.rst:171
msgid "Formatting"
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:1
msgid "This class helps with formatting text-based help pages.  It's usually just needed for very special internal cases, but it's also exposed so that developers can write their own fancy outputs."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:5
msgid "At present, it always writes into memory."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:7
msgid "the additional increment for each level."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter:8
msgid "the width for the text.  This defaults to the terminal width clamped to a maximum of 78."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.dedent:1
msgid "Decreases the indentation."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.getvalue:1
msgid "Returns the buffer contents."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.indent:1
msgid "Increases the indentation."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.indentation:1
msgid "A context manager that increases the indentation."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.section:1
msgid "Helpful context manager that writes a paragraph, a heading, and the indents."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.section:4
msgid "the section name that is written as heading."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write:1
msgid "Writes a unicode string into the internal buffer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:1
msgid "Writes a definition list into the buffer.  This is how options and commands are usually formatted."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:4
msgid "a list of two item tuples for the terms and values."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:5
msgid "the maximum width of the first column."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_dl:6
msgid "the number of spaces between the first and second column."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_heading:1
msgid "Writes a heading into the buffer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_paragraph:1
msgid "Writes a paragraph into the buffer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_text:1
msgid "Writes re-indented text into the buffer.  This rewraps and preserves paragraphs."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:1
msgid "Writes a usage line into the buffer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:3
msgid "the program name."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:4
msgid "whitespace separated list of arguments."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.HelpFormatter.write_usage:5
msgid "The prefix for the first line. Defaults to ``\"Usage: \"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:1
msgid "A helper function that intelligently wraps text.  By default, it assumes that it operates on a single paragraph of text but if the `preserve_paragraphs` parameter is provided it will intelligently handle paragraphs (defined by two empty lines)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:6
msgid "If paragraphs are handled, a paragraph can be prefixed with an empty line containing the ``\\b`` character (``\\x08``) to indicate that no rewrapping should happen in that block."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:10
msgid "the text that should be rewrapped."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:11
msgid "the maximum width for the text."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:12
msgid "the initial indent that should be placed on the first line as a string."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:14
msgid "the indent string that should be placed on each consecutive line."
msgstr ""

#: ../../../.venv/lib/site-packages/click/formatting.py:docstring of click.formatting.wrap_text:16
msgid "if this flag is set then the wrapping will intelligently handle paragraphs."
msgstr ""

#: ../../click/docs/api.rst:179
msgid "Parsing"
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser:1
msgid "The option parser is an internal class that is ultimately used to parse options and arguments.  It's modelled after optparse and brings a similar but vastly simplified API.  It should generally not be used directly as the high level Click classes wrap it for you."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser:6
msgid "It's not nearly as extensible as optparse or argparse as it does not implement features that are implemented on a higher level (such as types or defaults)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser:10
msgid "optionally the :class:`~click.Context` where this parser should go with."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_argument:1
msgid "Adds a positional argument named `dest` to the parser."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_argument:3
#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_option:6
msgid "The `obj` can be used to identify the option in the order list that is returned from the parser."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.add_option:1
msgid "Adds a new option named `dest` to the parser.  The destination is not inferred (unlike with optparse) and needs to be explicitly provided.  Action can be any of ``store``, ``store_const``, ``append``, ``appnd_const`` or ``count``."
msgstr ""

#: ../../docstring of click.OptionParser.allow_interspersed_args:1
msgid "This controls how the parser deals with interspersed arguments. If this is set to `False`, the parser will stop on the first non-option.  Click uses this to implement nested subcommands safely."
msgstr ""

#: ../../docstring of click.OptionParser.ctx:1
msgid "The :class:`~click.Context` for this parser.  This might be `None` for some advanced use cases."
msgstr ""

#: ../../docstring of click.OptionParser.ignore_unknown_options:1
msgid "This tells the parser how to deal with unknown options.  By default it will error out (which is sensible), but there is a second mode where it will ignore it and continue processing after shifting all the unknown options into the resulting args."
msgstr ""

#: ../../../.venv/lib/site-packages/click/parser.py:docstring of click.parser.OptionParser.parse_args:1
msgid "Parses positional arguments and returns ``(values, args, order)`` for the parsed options and arguments as well as the leftover arguments if there are any.  The order is a list of objects as they appear on the command line.  If arguments appear multiple times they will be memorized multiple times as well."
msgstr ""

#: ../../click/docs/api.rst:186
msgid "Shell Completion"
msgstr ""

#: ../../click/docs/api.rst:188
msgid "See :doc:`/shell-completion` for information about enabling and customizing Click's shell completion system."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:1
msgid "Represents a completion value and metadata about the value. The default metadata is ``type`` to indicate special shell handling, and ``help`` if a shell supports showing a help string next to the value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:6
msgid "Arbitrary parameters can be passed when creating the object, and accessed using ``item.attr``. If an attribute wasn't passed, accessing it returns ``None``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:10
msgid "The completion suggestion."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:11
msgid "Tells the shell script to provide special completion support for the type. Click uses ``\"dir\"`` and ``\"file\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:13
msgid "String shown next to the value if supported."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.CompletionItem:14
msgid "Arbitrary metadata. The built-in implementations don't use this, but custom type completions paired with custom shell support could use it."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:1
msgid "Base class for providing shell completion support. A subclass for a given shell will override attributes and methods to implement the completion instructions (``source`` and ``complete``)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:5
msgid "Command being called."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:6
msgid "Name of the executable in the shell."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete:7
msgid "Name of the environment variable that holds the completion instruction."
msgstr ""

#: ../../docstring of click.shell_completion.ShellComplete.name:1
msgid "Name to register the shell as with :func:`add_completion_class`. This is used in completion instructions (``{name}_source`` and ``{name}_complete``)."
msgstr ""

#: ../../docstring of click.shell_completion.ShellComplete.source_template:1
msgid "Completion script template formatted by :meth:`source`. This must be provided by subclasses."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.func_name:1
msgid "The name of the shell function defined by the completion script."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.source_vars:1
msgid "Vars for formatting :attr:`source_template`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.source_vars:3
msgid "By default this provides ``complete_func``, ``complete_var``, and ``prog_name``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.source:1
msgid "Produce the shell script that defines the completion function. By default this ``%``-style formats :attr:`source_template` with the dict returned by :meth:`source_vars`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completion_args:1
msgid "Use the env vars defined by the shell script to return a tuple of ``args, incomplete``. This must be implemented by subclasses."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completions:1
msgid "Determine the context and last complete command or parameter from the complete args. Call that object's ``shell_complete`` method to get the completions for the incomplete value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.get_completions:5
msgid "List of complete args before the incomplete value."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.format_completion:1
msgid "Format a completion item into the form recognized by the shell script. This must be implemented by subclasses."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.format_completion:4
msgid "Completion item to format."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.complete:1
msgid "Produce the completion data to send back to the shell."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.ShellComplete.complete:3
msgid "By default this calls :meth:`get_completion_args`, gets the completions, then calls :meth:`format_completion` for each completion."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.add_completion_class:1
msgid "Register a :class:`ShellComplete` subclass under the given name. The name will be provided by the completion instruction environment variable during completion."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.add_completion_class:5
msgid "The completion class that will handle completion for the shell."
msgstr ""

#: ../../../.venv/lib/site-packages/click/shell_completion.py:docstring of click.shell_completion.add_completion_class:7
msgid "Name to register the class under. Defaults to the class's ``name`` attribute."
msgstr ""

#: ../../click/docs/api.rst:203
msgid "Testing"
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:1
msgid "The CLI runner provides functionality to invoke a Click command line script for unittesting purposes in a isolated environment.  This only works in single-threaded systems without any concurrency as it changes the global interpreter state."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:6
msgid "the character set for the input and output data."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:7
msgid "a dictionary with environment variables for overriding."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:8
msgid "if this is set to `True`, then reading from stdin writes to stdout.  This is useful for showing examples in some circumstances.  Note that regular prompts will automatically echo the input."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner:12
msgid "if this is set to `False`, then stdout and stderr are preserved as independent streams.  This is useful for Unix-philosophy apps that have predictable stdout and noisy stderr, such that each may be measured independently"
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.get_default_prog_name:1
msgid "Given a command object it will return the default program name for it.  The default is the `name` attribute or ``\"root\"`` if not set."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:1
msgid "Invokes a command in an isolated environment.  The arguments are forwarded directly to the command line script, the `extra` keyword arguments are passed to the :meth:`~clickpkg.Command.main` function of the command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:6
msgid "This returns a :class:`Result` object."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:8
msgid "the command to invoke"
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:9
msgid "the arguments to invoke. It may be given as an iterable or a string. When given as string it will be interpreted as a Unix shell command. More details at :func:`shlex.split`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:13
msgid "the input data for `sys.stdin`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:14
msgid "the environment overrides."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:15
msgid "Whether to catch any other exceptions than ``SystemExit``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:17
msgid "the keyword arguments to pass to :meth:`main`."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:18
#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:11
msgid "whether the output should contain color codes. The application can still override this explicitly."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:21
msgid "The result object has the ``return_value`` attribute with the value returned from the invoked command."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:28
msgid "Added the ``catch_exceptions`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.invoke:31
msgid "The result object has the ``exc_info`` attribute with the traceback if available."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolated_filesystem:1
msgid "A context manager that creates a temporary directory and changes the current working directory to it. This isolates tests that affect the contents of the CWD to prevent them from interfering with each other."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolated_filesystem:6
msgid "Create the temporary directory under this directory. If given, the created directory is not removed when exiting."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolated_filesystem:10
msgid "Added the ``temp_dir`` parameter."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:1
msgid "A context manager that sets up the isolation for invoking of a command line tool.  This sets up stdin with the given input data and `os.environ` with the overrides from the given dictionary. This also rebinds some internals in Click to be mocked (like the prompt functionality)."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:7
msgid "This is automatically done in the :meth:`invoke` method."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:9
msgid "the input stream to put into sys.stdin."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:10
msgid "the environment overrides as dictionary."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.isolation:14
msgid "``stderr`` is opened with ``errors=\"backslashreplace\"`` instead of the default ``\"strict\"``."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.CliRunner.make_env:1
msgid "Returns the environment overrides for invoking a script."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.Result:1
msgid "Holds the captured result of an invoked CLI script."
msgstr ""

#: ../../docstring of click.testing.Result.exc_info:1
msgid "The traceback"
msgstr ""

#: ../../docstring of click.testing.Result.exception:1
msgid "The exception that happened if one did."
msgstr ""

#: ../../docstring of click.testing.Result.exit_code:1
msgid "The exit code as integer."
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.Result.output:1
msgid "The (standard) output as unicode string."
msgstr ""

#: ../../docstring of click.testing.Result.return_value:1
msgid "The value returned from the invoked command."
msgstr ""

#: ../../docstring of click.testing.Result.runner:1
msgid "The runner that created the result"
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.Result.stderr:1
msgid "The standard error as unicode string."
msgstr ""

#: ../../docstring of click.testing.Result.stderr_bytes:1
msgid "The standard error as bytes, or None if not available"
msgstr ""

#: ../../../.venv/lib/site-packages/click/testing.py:docstring of click.testing.Result.stdout:1
msgid "The standard output as unicode string."
msgstr ""

#: ../../docstring of click.testing.Result.stdout_bytes:1
msgid "The standard output as bytes."
msgstr ""
