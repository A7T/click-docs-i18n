# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Pallets
# This file is distributed under the same license as the Click package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Click 8.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 10:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../click/docs/unicode-support.rst:2
msgid "Unicode Support"
msgstr ""

#: ../../click/docs/unicode-support.rst:6
msgid "Click has to take extra care to support Unicode text in different environments."
msgstr ""

#: ../../click/docs/unicode-support.rst:9
msgid "The command line in Unix is traditionally bytes, not Unicode. While there are encoding hints, there are some situations where this can break. The most common one is SSH connections to machines with different locales."
msgstr ""

#: ../../click/docs/unicode-support.rst:14
msgid "Misconfigured environments can cause a wide range of Unicode problems due to the lack of support for roundtripping surrogate escapes. This will not be fixed in Click itself!"
msgstr ""

#: ../../click/docs/unicode-support.rst:18
msgid "Standard input and output is opened in text mode by default. Click has to reopen the stream in binary mode in certain situations. Because there is no standard way to do this, it might not always work. Primarily this can become a problem when testing command-line applications."
msgstr ""

#: ../../click/docs/unicode-support.rst:24
msgid "This is not supported::"
msgstr ""

#: ../../click/docs/unicode-support.rst:29
msgid "Instead you need to do this::"
msgstr ""

#: ../../click/docs/unicode-support.rst:37
msgid "Remember in that case, you need to use ``out_stream.getvalue()`` and not ``sys.stdout.getvalue()`` if you want to access the buffer contents as the wrapper will not forward that method."
msgstr ""

#: ../../click/docs/unicode-support.rst:41
msgid "``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` are by default text-based. When Click needs a binary stream, it attempts to discover the underlying binary stream."
msgstr ""

#: ../../click/docs/unicode-support.rst:45
msgid "``sys.argv`` is always text. This means that the native type for input values to the types in Click is Unicode, not bytes."
msgstr ""

#: ../../click/docs/unicode-support.rst:48
msgid "This causes problems if the terminal is incorrectly set and Python does not figure out the encoding. In that case, the Unicode string will contain error bytes encoded as surrogate escapes."
msgstr ""

#: ../../click/docs/unicode-support.rst:52
msgid "When dealing with files, Click will always use the Unicode file system API by using the operating system's reported or guessed filesystem encoding. Surrogates are supported for filenames, so it should be possible to open files through the :class:`File` type even if the environment is misconfigured."
msgstr ""

#: ../../click/docs/unicode-support.rst:60
msgid "Surrogate Handling"
msgstr ""

#: ../../click/docs/unicode-support.rst:62
msgid "Click does all the Unicode handling in the standard library and is subject to its behavior. Unicode requires extra care. The reason for this is that the encoding detection is done in the interpreter, and on Linux and certain other operating systems, its encoding handling is problematic."
msgstr ""

#: ../../click/docs/unicode-support.rst:68
msgid "The biggest source of frustration is that Click scripts invoked by init systems, deployment tools, or cron jobs will refuse to work unless a Unicode locale is exported."
msgstr ""

#: ../../click/docs/unicode-support.rst:72
msgid "If Click encounters such an environment it will prevent further execution to force you to set a locale. This is done because Click cannot know about the state of the system once it's invoked and restore the values before Python's Unicode handling kicked in."
msgstr ""

#: ../../click/docs/unicode-support.rst:77
msgid "If you see something like this error::"
msgstr ""

#: ../../click/docs/unicode-support.rst:86
msgid "You are dealing with an environment where Python thinks you are restricted to ASCII data. The solution to these problems is different depending on which locale your computer is running in."
msgstr ""

#: ../../click/docs/unicode-support.rst:90
msgid "For instance, if you have a German Linux machine, you can fix the problem by exporting the locale to ``de_DE.utf-8``::"
msgstr ""

#: ../../click/docs/unicode-support.rst:96
msgid "If you are on a US machine, ``en_US.utf-8`` is the encoding of choice. On some newer Linux systems, you could also try ``C.UTF-8`` as the locale::"
msgstr ""

#: ../../click/docs/unicode-support.rst:103
msgid "On some systems it was reported that ``UTF-8`` has to be written as ``UTF8`` and vice versa. To see which locales are supported you can invoke ``locale -a``."
msgstr ""

#: ../../click/docs/unicode-support.rst:107
msgid "You need to export the values before you invoke your Python script."
msgstr ""

#: ../../click/docs/unicode-support.rst:109
msgid "In Python 3.7 and later you will no longer get a ``RuntimeError`` in many cases thanks to :pep:`538` and :pep:`540`, which changed the default assumption in unconfigured environments. This doesn't change the general issue that your locale may be misconfigured."
msgstr ""
