# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Pallets
# This file is distributed under the same license as the Click package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Click 8.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 10:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../click/docs/utils.rst:2
msgid "Utilities"
msgstr ""

#: ../../click/docs/utils.rst:6
msgid "Besides the functionality that Click provides to interface with argument parsing and handling, it also provides a bunch of addon functionality that is useful for writing command line utilities."
msgstr ""

#: ../../click/docs/utils.rst:12
msgid "Printing to Stdout"
msgstr ""

#: ../../click/docs/utils.rst:14
msgid "The most obvious helper is the :func:`echo` function, which in many ways works like the Python ``print`` statement or function.  The main difference is that it works the same in many different terminal environments."
msgstr ""

#: ../../click/docs/utils.rst:18
#: ../../click/docs/utils.rst:147
#: ../../click/docs/utils.rst:185
#: ../../click/docs/utils.rst:249
#: ../../click/docs/utils.rst:270
#: ../../click/docs/utils.rst:293
msgid "Example::"
msgstr ""

#: ../../click/docs/utils.rst:24
msgid "It can output both text and binary data. It will emit a trailing newline by default, which needs to be suppressed by passing ``nl=False``::"
msgstr ""

#: ../../click/docs/utils.rst:29
msgid "Last but not least :func:`echo` uses click's intelligent internal output streams to stdout and stderr which support unicode output on the Windows console.  This means for as long as you are using `click.echo` you can output unicode characters (there are some limitations on the default font with regards to which characters can be displayed)."
msgstr ""

#: ../../click/docs/utils.rst:37
msgid "Click emulates output streams on Windows to support unicode to the Windows console through separate APIs.  For more information see :doc:`wincmd`."
msgstr ""

#: ../../click/docs/utils.rst:43
msgid "You can also easily print to standard error by passing ``err=True``::"
msgstr ""

#: ../../click/docs/utils.rst:51
msgid "ANSI Colors"
msgstr ""

#: ../../click/docs/utils.rst:55
msgid "The :func:`echo` function supports ANSI colors and styles. On Windows this uses `colorama`_."
msgstr ""

#: ../../click/docs/utils.rst:58
msgid "Primarily this means that:"
msgstr ""

#: ../../click/docs/utils.rst:60
msgid "Click's :func:`echo` function will automatically strip ANSI color codes if the stream is not connected to a terminal."
msgstr ""

#: ../../click/docs/utils.rst:62
msgid "the :func:`echo` function will transparently connect to the terminal on Windows and translate ANSI codes to terminal API calls.  This means that colors will work on Windows the same way they do on other operating systems."
msgstr ""

#: ../../click/docs/utils.rst:67
msgid "On Windows, Click uses colorama without calling ``colorama.init()``. You can still call that in your code, but it's not required for Click."
msgstr ""

#: ../../click/docs/utils.rst:70
msgid "For styling a string, the :func:`style` function can be used::"
msgstr ""

#: ../../click/docs/utils.rst:78
msgid "The combination of :func:`echo` and :func:`style` is also available in a single function called :func:`secho`::"
msgstr ""

#: ../../click/docs/utils.rst:89
msgid "Pager Support"
msgstr ""

#: ../../click/docs/utils.rst:91
msgid "In some situations, you might want to show long texts on the terminal and let a user scroll through it.  This can be achieved by using the :func:`echo_via_pager` function which works similarly to the :func:`echo` function, but always writes to stdout and, if possible, through a pager."
msgstr ""

#: ../../click/docs/utils.rst:96
msgid "Example:"
msgstr ""

#: ../../click/docs/utils.rst:104
msgid "If you want to use the pager for a lot of text, especially if generating everything in advance would take a lot of time, you can pass a generator (or generator function) instead of a string:"
msgstr ""

#: ../../click/docs/utils.rst:117
msgid "Screen Clearing"
msgstr ""

#: ../../click/docs/utils.rst:121
msgid "To clear the terminal screen, you can use the :func:`clear` function that is provided starting with Click 2.0.  It does what the name suggests: it clears the entire visible screen in a platform-agnostic way:"
msgstr ""

#: ../../click/docs/utils.rst:132
msgid "Getting Characters from Terminal"
msgstr ""

#: ../../click/docs/utils.rst:136
msgid "Normally, when reading input from the terminal, you would read from standard input.  However, this is buffered input and will not show up until the line has been terminated.  In certain circumstances, you might not want to do that and instead read individual characters as they are being written."
msgstr ""

#: ../../click/docs/utils.rst:141
msgid "For this, Click provides the :func:`getchar` function which reads a single character from the terminal buffer and returns it as a Unicode character."
msgstr ""

#: ../../click/docs/utils.rst:144
msgid "Note that this function will always read from the terminal, even if stdin is instead a pipe."
msgstr ""

#: ../../click/docs/utils.rst:161
msgid "Note that this reads raw input, which means that things like arrow keys will show up in the platform's native escape format.  The only characters translated are ``^C`` and ``^D`` which are converted into keyboard interrupts and end of file exceptions respectively.  This is done because otherwise, it's too easy to forget about that and to create scripts that cannot be properly exited."
msgstr ""

#: ../../click/docs/utils.rst:170
msgid "Waiting for Key Press"
msgstr ""

#: ../../click/docs/utils.rst:174
msgid "Sometimes, it's useful to pause until the user presses any key on the keyboard.  This is especially useful on Windows where ``cmd.exe`` will close the window at the end of the command execution by default, instead of waiting."
msgstr ""

#: ../../click/docs/utils.rst:179
msgid "In click, this can be accomplished with the :func:`pause` function.  This function will print a quick message to the terminal (which can be customized) and wait for the user to press a key.  In addition to that, it will also become a NOP (no operation instruction) if the script is not run interactively."
msgstr ""

#: ../../click/docs/utils.rst:192
msgid "Launching Editors"
msgstr ""

#: ../../click/docs/utils.rst:196
msgid "Click supports launching editors automatically through :func:`edit`.  This is very useful for asking users for multi-line input.  It will automatically open the user's defined editor or fall back to a sensible default.  If the user closes the editor without saving, the return value will be ``None``, otherwise the entered text."
msgstr ""

#: ../../click/docs/utils.rst:202
#: ../../click/docs/utils.rst:215
#: ../../click/docs/utils.rst:232
#: ../../click/docs/utils.rst:320
msgid "Example usage::"
msgstr ""

#: ../../click/docs/utils.rst:212
msgid "Alternatively, the function can also be used to launch editors for files by a specific filename.  In this case, the return value is always `None`."
msgstr ""

#: ../../click/docs/utils.rst:222
msgid "Launching Applications"
msgstr ""

#: ../../click/docs/utils.rst:226
msgid "Click supports launching applications through :func:`launch`.  This can be used to open the default application associated with a URL or filetype. This can be used to launch web browsers or picture viewers, for instance. In addition to this, it can also launch the file manager and automatically select the provided file."
msgstr ""

#: ../../click/docs/utils.rst:239
msgid "Printing Filenames"
msgstr ""

#: ../../click/docs/utils.rst:241
msgid "Because filenames might not be Unicode, formatting them can be a bit tricky."
msgstr ""

#: ../../click/docs/utils.rst:244
msgid "The way this works with click is through the :func:`format_filename` function.  It does a best-effort conversion of the filename to Unicode and will never fail.  This makes it possible to use these filenames in the context of a full Unicode string."
msgstr ""

#: ../../click/docs/utils.rst:255
msgid "Standard Streams"
msgstr ""

#: ../../click/docs/utils.rst:257
msgid "For command line utilities, it's very important to get access to input and output streams reliably.  Python generally provides access to these streams through ``sys.stdout`` and friends, but unfortunately, there are API differences between 2.x and 3.x, especially with regards to how these streams respond to Unicode and binary data."
msgstr ""

#: ../../click/docs/utils.rst:263
msgid "Because of this, click provides the :func:`get_binary_stream` and :func:`get_text_stream` functions, which produce consistent results with different Python versions and for a wide variety of terminal configurations."
msgstr ""

#: ../../click/docs/utils.rst:267
msgid "The end result is that these functions will always return a functional stream object (except in very odd cases; see :doc:`/unicode-support`)."
msgstr ""

#: ../../click/docs/utils.rst:279
msgid "Click now emulates output streams on Windows to support unicode to the Windows console through separate APIs.  For more information see :doc:`wincmd`."
msgstr ""

#: ../../click/docs/utils.rst:285
msgid "Intelligent File Opening"
msgstr ""

#: ../../click/docs/utils.rst:289
msgid "Starting with Click 3.0 the logic for opening files from the :class:`File` type is exposed through the :func:`open_file` function.  It can intelligently open stdin/stdout as well as any other file."
msgstr ""

#: ../../click/docs/utils.rst:300
msgid "If stdin or stdout are returned, the return value is wrapped in a special file where the context manager will prevent the closing of the file.  This makes the handling of standard streams transparent and you can always use it like this::"
msgstr ""

#: ../../click/docs/utils.rst:310
msgid "Finding Application Folders"
msgstr ""

#: ../../click/docs/utils.rst:314
msgid "Very often, you want to open a configuration file that belongs to your application.  However, different operating systems store these configuration files in different locations depending on their standards.  Click provides a :func:`get_app_dir` function which returns the most appropriate location for per-user config files for your application depending on the OS."
msgstr ""

#: ../../click/docs/utils.rst:340
msgid "Showing Progress Bars"
msgstr ""

#: ../../click/docs/utils.rst:342
msgid "Sometimes, you have command line scripts that need to process a lot of data, but you want to quickly show the user some progress about how long that will take.  Click supports simple progress bar rendering for that through the :func:`progressbar` function."
msgstr ""

#: ../../click/docs/utils.rst:349
msgid "If you find that you have requirements beyond what Click's progress bar supports, try using `tqdm`_."
msgstr ""

#: ../../click/docs/utils.rst:354
msgid "The basic usage is very simple: the idea is that you have an iterable that you want to operate on.  For each item in the iterable it might take some time to do processing.  So say you have a loop like this::"
msgstr ""

#: ../../click/docs/utils.rst:361
msgid "To hook this up with an automatically updating progress bar, all you need to do is to change the code to this::"
msgstr ""

#: ../../click/docs/utils.rst:370
msgid "Click will then automatically print a progress bar to the terminal and calculate the remaining time for you.  The calculation of remaining time requires that the iterable has a length.  If it does not have a length but you know the length, you can explicitly provide it::"
msgstr ""

#: ../../click/docs/utils.rst:380
msgid "Note that :func:`progressbar` updates the bar *after* each iteration of the loop. So code like this will render correctly::"
msgstr ""

#: ../../click/docs/utils.rst:390
msgid "Another useful feature is to associate a label with the progress bar which will be shown preceding the progress bar::"
msgstr ""

#: ../../click/docs/utils.rst:399
msgid "Sometimes, one may need to iterate over an external iterator, and advance the progress bar irregularly. To do so, you need to specify the length (and no iterable), and use the update method on the context return value instead of iterating directly over it::"
msgstr ""
