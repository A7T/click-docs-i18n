# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Pallets
# This file is distributed under the same license as the Click package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Click 8.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 10:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../click/docs/options.rst:4
msgid "Options"
msgstr ""

#: ../../click/docs/options.rst:8
msgid "Adding options to commands can be accomplished by the :func:`option` decorator.  Since options can come in various different versions, there are a ton of parameters to configure their behavior. Options in click are distinct from :ref:`positional arguments <arguments>`."
msgstr ""

#: ../../click/docs/options.rst:14
msgid "Name Your Options"
msgstr ""

#: ../../click/docs/options.rst:16
msgid "Options have a name that will be used as the Python argument name when calling the decorated function. This can be inferred from the option names or given explicitly. Names are given as position arguments to the decorator."
msgstr ""

#: ../../click/docs/options.rst:21
msgid "A name is chosen in the following order"
msgstr ""

#: ../../click/docs/options.rst:23
msgid "If a name is not prefixed, it is used as the Python argument name and not treated as an option name on the command line."
msgstr ""

#: ../../click/docs/options.rst:25
msgid "If there is at least one name prefixed with two dashes, the first one given is used as the name."
msgstr ""

#: ../../click/docs/options.rst:27
msgid "The first name prefixed with one dash is used otherwise."
msgstr ""

#: ../../click/docs/options.rst:29
msgid "To get the Python argument name, the chosen name is converted to lower case, up to two dashes are removed as the prefix, and other dashes are converted to underscores."
msgstr ""

#: ../../click/docs/options.rst:47
msgid "``\"-f\", \"--foo-bar\"``, the name is ``foo_bar``"
msgstr ""

#: ../../click/docs/options.rst:48
msgid "``\"-x\"``, the name is ``x``"
msgstr ""

#: ../../click/docs/options.rst:49
msgid "``\"-f\", \"--filename\", \"dest\"``, the name is  ``dest``"
msgstr ""

#: ../../click/docs/options.rst:50
msgid "``\"--CamelCase\"``, the name is ``camelcase``"
msgstr ""

#: ../../click/docs/options.rst:51
msgid "``\"-f\", \"-fb\"``, the name is ``f``"
msgstr ""

#: ../../click/docs/options.rst:52
msgid "``\"--f\", \"--foo-bar\"``, the name is ``f``"
msgstr ""

#: ../../click/docs/options.rst:53
msgid "``\"---f\"``, the name is ``_f``"
msgstr ""

#: ../../click/docs/options.rst:56
msgid "Basic Value Options"
msgstr ""

#: ../../click/docs/options.rst:58
msgid "The most basic option is a value option.  These options accept one argument which is a value.  If no type is provided, the type of the default value is used.  If no default value is provided, the type is assumed to be :data:`STRING`.  Unless a name is explicitly specified, the name of the parameter is the first long option defined; otherwise the first short one is used. By default, options are not required, however to make an option required, simply pass in `required=True` as an argument to the decorator."
msgstr ""

#: ../../click/docs/options.rst:90
#: ../../click/docs/options.rst:148
#: ../../click/docs/options.rst:174
#: ../../click/docs/options.rst:212
#: ../../click/docs/options.rst:241
#: ../../click/docs/options.rst:271
#: ../../click/docs/options.rst:294
#: ../../click/docs/options.rst:360
msgid "And on the command line:"
msgstr ""

#: ../../click/docs/options.rst:96
msgid "In this case the option is of type :data:`INT` because the default value is an integer."
msgstr ""

#: ../../click/docs/options.rst:99
msgid "To show the default values when showing command help, use ``show_default=True``"
msgstr ""

#: ../../click/docs/options.rst:112
msgid "For single option boolean flags, the default remains hidden if the default value is False."
msgstr ""

#: ../../click/docs/options.rst:134
msgid "Multi Value Options"
msgstr ""

#: ../../click/docs/options.rst:136
msgid "Sometimes, you have options that take more than one argument.  For options, only a fixed number of arguments is supported.  This can be configured by the ``nargs`` parameter.  The values are then stored as a tuple."
msgstr ""

#: ../../click/docs/options.rst:157
msgid "Tuples as Multi Value Options"
msgstr ""

#: ../../click/docs/options.rst:161
msgid "As you can see that by using `nargs` set to a specific number each item in the resulting tuple is of the same type.  This might not be what you want. Commonly you might want to use different types for different indexes in the tuple.  For this you can directly specify a tuple as type:"
msgstr ""

#: ../../click/docs/options.rst:180
msgid "By using a tuple literal as type, `nargs` gets automatically set to the length of the tuple and the :class:`click.Tuple` type is automatically used.  The above example is thus equivalent to this:"
msgstr ""

#: ../../click/docs/options.rst:195
msgid "Multiple Options"
msgstr ""

#: ../../click/docs/options.rst:197
msgid "Similarly to ``nargs``, there is also the case of wanting to support a parameter being provided multiple times and have all the values recorded -- not just the last one.  For instance, ``git commit -m foo -m bar`` would record two lines for the commit message: ``foo`` and ``bar``. This can be accomplished with the ``multiple`` flag:"
msgstr ""

#: ../../click/docs/options.rst:203
#: ../../click/docs/options.rst:257
#: ../../click/docs/options.rst:320
#: ../../click/docs/options.rst:379
#: ../../click/docs/options.rst:424
#: ../../click/docs/options.rst:688
msgid "Example:"
msgstr ""

#: ../../click/docs/options.rst:218
msgid "When passing a ``default`` with ``multiple=True``, the default value must be a list or tuple, otherwise it will be interpreted as a list of single characters."
msgstr ""

#: ../../click/docs/options.rst:228
msgid "Counting"
msgstr ""

#: ../../click/docs/options.rst:230
msgid "In some very rare circumstances, it is interesting to use the repetition of options to count an integer up.  This can be used for verbosity flags, for instance:"
msgstr ""

#: ../../click/docs/options.rst:248
msgid "Boolean Flags"
msgstr ""

#: ../../click/docs/options.rst:250
msgid "Boolean flags are options that can be enabled or disabled.  This can be accomplished by defining two flags in one go separated by a slash (``/``) for enabling or disabling the option.  (If a slash is in an option string, Click automatically knows that it's a boolean flag and will pass ``is_flag=True`` implicitly.)  Click always wants you to provide an enable and disable flag so that you can change the default later."
msgstr ""

#: ../../click/docs/options.rst:279
msgid "If you really don't want an off-switch, you can just define one and manually inform Click that something is a flag:"
msgstr ""

#: ../../click/docs/options.rst:301
msgid "Note that if a slash is contained in your option already (for instance, if you use Windows-style parameters where ``/`` is the prefix character), you can alternatively split the parameters through ``;`` instead:"
msgstr ""

#: ../../click/docs/options.rst:317
msgid "If you want to define an alias for the second option only, then you will need to use leading whitespace to disambiguate the format string:"
msgstr ""

#: ../../click/docs/options.rst:339
msgid "Feature Switches"
msgstr ""

#: ../../click/docs/options.rst:341
msgid "In addition to boolean flags, there are also feature switches.  These are implemented by setting multiple options to the same parameter name and defining a flag value.  Note that by providing the ``flag_value`` parameter, Click will implicitly set ``is_flag=True``."
msgstr ""

#: ../../click/docs/options.rst:346
msgid "To set a default flag, assign a value of `True` to the flag that should be the default."
msgstr ""

#: ../../click/docs/options.rst:371
msgid "Choice Options"
msgstr ""

#: ../../click/docs/options.rst:373
msgid "Sometimes, you want to have a parameter be a choice of a list of values. In that case you can use :class:`Choice` type.  It can be instantiated with a list of valid values.  The originally passed choice will be returned, not the str passed on the command line.  Token normalization functions and ``case_sensitive=False`` can cause the two to be different but still match."
msgstr ""

#: ../../click/docs/options.rst:389
#: ../../click/docs/options.rst:450
#: ../../click/docs/options.rst:590
msgid "What it looks like:"
msgstr ""

#: ../../click/docs/options.rst:401
msgid "Only pass the choices as list or tuple. Other iterables (like generators) may lead to unexpected results."
msgstr ""

#: ../../click/docs/options.rst:404
msgid "Choices work with options that have ``multiple=True``. If a ``default`` value is given with ``multiple=True``, it should be a list or tuple of valid choices."
msgstr ""

#: ../../click/docs/options.rst:408
msgid "Choices should be unique after considering the effects of ``case_sensitive`` and any specified token normalization function."
msgstr ""

#: ../../click/docs/options.rst:411
msgid "The resulting value from an option will always be one of the originally passed choices regardless of ``case_sensitive``."
msgstr ""

#: ../../click/docs/options.rst:418
msgid "Prompting"
msgstr ""

#: ../../click/docs/options.rst:420
msgid "In some cases, you want parameters that can be provided from the command line, but if not provided, ask for user input instead.  This can be implemented with Click by defining a prompt string."
msgstr ""

#: ../../click/docs/options.rst:433
msgid "And what it looks like:"
msgstr ""

#: ../../click/docs/options.rst:440
msgid "If you are not happy with the default prompt string, you can ask for a different one:"
msgstr ""

#: ../../click/docs/options.rst:456
msgid "It is advised that prompt not be used in conjunction with the multiple flag set to True. Instead, prompt in the function interactively."
msgstr ""

#: ../../click/docs/options.rst:459
msgid "By default, the user will be prompted for an input if one was not passed through the command line. To turn this behavior off, see :ref:`optional-value`."
msgstr ""

#: ../../click/docs/options.rst:465
msgid "Password Prompts"
msgstr ""

#: ../../click/docs/options.rst:467
msgid "Click also supports hidden prompts and asking for confirmation.  This is useful for password input:"
msgstr ""

#: ../../click/docs/options.rst:486
msgid "Because this combination of parameters is quite common, this can also be replaced with the :func:`password_option` decorator:"
msgstr ""

#: ../../click/docs/options.rst:498
msgid "Dynamic Defaults for Prompts"
msgstr ""

#: ../../click/docs/options.rst:500
msgid "The ``auto_envvar_prefix`` and ``default_map`` options for the context allow the program to read option values from the environment or a configuration file.  However, this overrides the prompting mechanism, so that the user does not get the option to change the value interactively."
msgstr ""

#: ../../click/docs/options.rst:505
msgid "If you want to let the user configure the default value, but still be prompted if the option isn't specified on the command line, you can do so by supplying a callable as the default value. For example, to get a default from the environment:"
msgstr ""

#: ../../click/docs/options.rst:522
msgid "To describe what the default value will be, set it in ``show_default``."
msgstr ""

#: ../../click/docs/options.rst:543
msgid "Callbacks and Eager Options"
msgstr ""

#: ../../click/docs/options.rst:545
msgid "Sometimes, you want a parameter to completely change the execution flow. For instance, this is the case when you want to have a ``--version`` parameter that prints out the version and then exits the application."
msgstr ""

#: ../../click/docs/options.rst:549
msgid "Note: an actual implementation of a ``--version`` parameter that is reusable is available in Click as :func:`click.version_option`.  The code here is merely an example of how to implement such a flag."
msgstr ""

#: ../../click/docs/options.rst:553
msgid "In such cases, you need two concepts: eager parameters and a callback.  An eager parameter is a parameter that is handled before others, and a callback is what executes after the parameter is handled.  The eagerness is necessary so that an earlier required parameter does not produce an error message.  For instance, if ``--version`` was not eager and a parameter ``--foo`` was required and defined before, you would need to specify it for ``--version`` to work.  For more information, see :ref:`callback-evaluation-order`."
msgstr ""

#: ../../click/docs/options.rst:562
msgid "A callback is a function that is invoked with two parameters: the current :class:`Context` and the value.  The context provides some useful features such as quitting the application and gives access to other already processed parameters."
msgstr ""

#: ../../click/docs/options.rst:567
msgid "Here an example for a ``--version`` flag:"
msgstr ""

#: ../../click/docs/options.rst:583
msgid "The `expose_value` parameter prevents the pretty pointless ``version`` parameter from being passed to the callback.  If that was not specified, a boolean would be passed to the `hello` script.  The `resilient_parsing` flag is applied to the context if Click wants to parse the command line without any destructive behavior that would change the execution flow.  In this case, because we would exit the program, we instead do nothing."
msgstr ""

#: ../../click/docs/options.rst:597
#: ../../click/docs/options.rst:640
msgid "Callback Signature Changes"
msgstr ""

#: ../../click/docs/options.rst:599
#: ../../click/docs/options.rst:642
msgid "In Click 2.0 the signature for callbacks changed.  For more information about these changes see :ref:`upgrade-to-2.0`."
msgstr ""

#: ../../click/docs/options.rst:603
msgid "Yes Parameters"
msgstr ""

#: ../../click/docs/options.rst:605
msgid "For dangerous operations, it's very useful to be able to ask a user for confirmation.  This can be done by adding a boolean ``--yes`` flag and asking for confirmation if the user did not provide it and to fail in a callback:"
msgstr ""

#: ../../click/docs/options.rst:623
msgid "And what it looks like on the command line:"
msgstr ""

#: ../../click/docs/options.rst:630
msgid "Because this combination of parameters is quite common, this can also be replaced with the :func:`confirmation_option` decorator:"
msgstr ""

#: ../../click/docs/options.rst:646
msgid "Values from Environment Variables"
msgstr ""

#: ../../click/docs/options.rst:648
msgid "A very useful feature of Click is the ability to accept parameters from environment variables in addition to regular parameters.  This allows tools to be automated much easier.  For instance, you might want to pass a configuration file with a ``--config`` parameter but also support exporting a ``TOOL_CONFIG=hello.cfg`` key-value pair for a nicer development experience."
msgstr ""

#: ../../click/docs/options.rst:655
msgid "This is supported by Click in two ways.  One is to automatically build environment variables which is supported for options only.  To enable this feature, the ``auto_envvar_prefix`` parameter needs to be passed to the script that is invoked.  Each command and parameter is then added as an uppercase underscore-separated variable.  If you have a subcommand called ``run`` taking an option called ``reload`` and the prefix is ``WEB``, then the variable is ``WEB_RUN_RELOAD``."
msgstr ""

#: ../../click/docs/options.rst:663
#: ../../click/docs/options.rst:715
#: ../../click/docs/options.rst:752
msgid "Example usage:"
msgstr ""

#: ../../click/docs/options.rst:675
#: ../../click/docs/options.rst:727
#: ../../click/docs/options.rst:766
#: ../../click/docs/options.rst:792
msgid "And from the command line:"
msgstr ""

#: ../../click/docs/options.rst:682
msgid "When using ``auto_envvar_prefix`` with command groups, the command name needs to be included in the environment variable, between the prefix and the parameter name, *i.e.* ``PREFIX_COMMAND_VARIABLE``. If you have a subcommand called ``run-server`` taking an option called ``host`` and the prefix is ``WEB``, then the variable is ``WEB_RUN_SERVER_HOST``."
msgstr ""

#: ../../click/docs/options.rst:712
msgid "The second option is to manually pull values in from specific environment variables by defining the name of the environment variable on the option."
msgstr ""

#: ../../click/docs/options.rst:733
msgid "In that case it can also be a list of different environment variables where the first one is picked."
msgstr ""

#: ../../click/docs/options.rst:737
msgid "Multiple Values from Environment Values"
msgstr ""

#: ../../click/docs/options.rst:739
msgid "As options can accept multiple values, pulling in such values from environment variables (which are strings) is a bit more complex.  The way Click solves this is by leaving it up to the type to customize this behavior.  For both ``multiple`` and ``nargs`` with values other than ``1``, Click will invoke the :meth:`ParamType.split_envvar_value` method to perform the splitting."
msgstr ""

#: ../../click/docs/options.rst:746
msgid "The default implementation for all types is to split on whitespace.  The exceptions to this rule are the :class:`File` and :class:`Path` types which both split according to the operating system's path splitting rules. On Unix systems like Linux and OS X, the splitting happens for those on every colon (``:``), and for Windows, on every semicolon (``;``)."
msgstr ""

#: ../../click/docs/options.rst:774
msgid "Other Prefix Characters"
msgstr ""

#: ../../click/docs/options.rst:776
msgid "Click can deal with alternative prefix characters other than ``-`` for options.  This is for instance useful if you want to handle slashes as parameters ``/`` or something similar.  Note that this is strongly discouraged in general because Click wants developers to stay close to POSIX semantics.  However in certain situations this can be useful:"
msgstr ""

#: ../../click/docs/options.rst:799
msgid "Note that if you are using ``/`` as prefix character and you want to use a boolean flag you need to separate it with ``;`` instead of ``/``:"
msgstr ""

#: ../../click/docs/options.rst:815
msgid "Range Options"
msgstr ""

#: ../../click/docs/options.rst:817
msgid "The :class:`IntRange` type extends the :data:`INT` type to ensure the value is contained in the given range. The :class:`FloatRange` type does the same for :data:`FLOAT`."
msgstr ""

#: ../../click/docs/options.rst:821
msgid "If ``min`` or ``max`` is omitted, that side is *unbounded*. Any value in that direction is accepted. By default, both bounds are *closed*, which means the boundary value is included in the accepted range. ``min_open`` and ``max_open`` can be used to exclude that boundary from the range."
msgstr ""

#: ../../click/docs/options.rst:826
msgid "If ``clamp`` mode is enabled, a value that is outside the range is set to the boundary instead of failing. For example, the range ``0, 5`` would return ``5`` for the value ``10``, or ``0`` for the value ``-1``. When using :class:`FloatRange`, ``clamp`` can only be enabled if both bounds are *closed* (the default)."
msgstr ""

#: ../../click/docs/options.rst:847
msgid "Callbacks for Validation"
msgstr ""

#: ../../click/docs/options.rst:851
msgid "If you want to apply custom validation logic, you can do this in the parameter callbacks. These callbacks can both modify values as well as raise errors if the validation does not work. The callback runs after type conversion. It is called for all sources, including prompts."
msgstr ""

#: ../../click/docs/options.rst:856
msgid "In Click 1.0, you can only raise the :exc:`UsageError` but starting with Click 2.0, you can also raise the :exc:`BadParameter` error, which has the added advantage that it will automatically format the error message to also contain the parameter name."
msgstr ""

#: ../../click/docs/options.rst:894
msgid "Optional Value"
msgstr ""

#: ../../click/docs/options.rst:896
msgid "Providing the value to an option can be made optional, in which case providing only the option's flag without a value will either show a prompt or use its ``flag_value``."
msgstr ""

#: ../../click/docs/options.rst:900
msgid "Setting ``is_flag=False, flag_value=value`` tells Click that the option can still be passed a value, but if only the flag is given the ``flag_value`` is used."
msgstr ""

#: ../../click/docs/options.rst:917
msgid "If the option has ``prompt`` enabled, then setting ``prompt_required=False`` tells Click to only show the prompt if the option's flag is given, instead of if the option is not provided at all."
msgstr ""

#: ../../click/docs/options.rst:934
msgid "If ``required=True``, then the option will still prompt if it is not given, but it will also prompt if only the flag is given."
msgstr ""
