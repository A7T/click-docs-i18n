# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Pallets
# This file is distributed under the same license as the Click package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Click 8.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 10:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../click/docs/api.rst:2
msgid "API"
msgstr ""

#: ../../click/docs/api.rst:6
msgid "This part of the documentation lists the full API reference of all public classes and functions."
msgstr ""

#: ../../click/docs/api.rst:10
msgid "Decorators"
msgstr ""

#: click.decorators.command:1 of
msgid "Creates a new :class:`Command` and uses the decorated function as callback.  This will also automatically attach all decorated :func:`option`\\s and :func:`argument`\\s as parameters to the command."
msgstr ""

#: click.decorators.command:5 of
msgid "The name of the command defaults to the name of the function with underscores replaced by dashes.  If you want to change that, you can pass the intended name as the first argument."
msgstr ""

#: click.decorators.command:9 of
msgid "All keyword arguments are forwarded to the underlying command class."
msgstr ""

#: click.decorators.command:11 of
msgid "Once decorated the function turns into a :class:`Command` instance that can be invoked as a command line utility or be attached to a command :class:`Group`."
msgstr ""

#: ../../click/docs/api.rst:97 click.BOOL click.FLOAT click.INT click.STRING
#: click.UNPROCESSED click.UUID click.core.Argument click.core.BaseCommand
#: click.core.BaseCommand.invoke click.core.BaseCommand.main
#: click.core.BaseCommand.make_context click.core.BaseCommand.parse_args
#: click.core.BaseCommand.shell_complete click.core.BaseCommand.to_info_dict
#: click.core.Command click.core.Command.collect_usage_pieces
#: click.core.Command.format_epilog click.core.Command.format_help
#: click.core.Command.format_help_text click.core.Command.format_options
#: click.core.Command.format_usage click.core.Command.get_help
#: click.core.Command.get_help_option click.core.Command.get_help_option_names
#: click.core.Command.get_short_help_str click.core.Command.get_usage
#: click.core.Command.invoke click.core.Command.make_parser
#: click.core.Command.parse_args click.core.Command.shell_complete
#: click.core.Command.to_info_dict click.core.CommandCollection
#: click.core.CommandCollection.add_source
#: click.core.CommandCollection.get_command
#: click.core.CommandCollection.list_commands click.core.Context
#: click.core.Context.call_on_close click.core.Context.ensure_object
#: click.core.Context.exit click.core.Context.fail
#: click.core.Context.find_object click.core.Context.forward
#: click.core.Context.get_parameter_source click.core.Context.invoke
#: click.core.Context.lookup_default click.core.Context.scope
#: click.core.Context.set_parameter_source click.core.Context.with_resource
#: click.core.Group click.core.Group.add_command click.core.Group.command
#: click.core.Group.get_command click.core.Group.group
#: click.core.Group.list_commands click.core.MultiCommand
#: click.core.MultiCommand.collect_usage_pieces
#: click.core.MultiCommand.format_commands
#: click.core.MultiCommand.format_options click.core.MultiCommand.get_command
#: click.core.MultiCommand.invoke click.core.MultiCommand.list_commands
#: click.core.MultiCommand.parse_args click.core.MultiCommand.result_callback
#: click.core.MultiCommand.shell_complete click.core.MultiCommand.to_info_dict
#: click.core.Option click.core.Parameter click.core.Parameter.get_default
#: click.core.Parameter.get_error_hint click.core.Parameter.shell_complete
#: click.core.Parameter.type_cast_value click.decorators.argument
#: click.decorators.command click.decorators.confirmation_option
#: click.decorators.group click.decorators.help_option
#: click.decorators.make_pass_decorator click.decorators.option
#: click.decorators.pass_context click.decorators.pass_meta_key
#: click.decorators.pass_obj click.decorators.password_option
#: click.decorators.version_option click.exceptions.BadArgumentUsage
#: click.exceptions.BadOptionUsage click.exceptions.BadParameter
#: click.exceptions.ClickException click.exceptions.FileError
#: click.exceptions.NoSuchOption click.exceptions.UsageError
#: click.formatting.HelpFormatter click.formatting.HelpFormatter.section
#: click.formatting.HelpFormatter.write click.formatting.HelpFormatter.write_dl
#: click.formatting.HelpFormatter.write_heading
#: click.formatting.HelpFormatter.write_text
#: click.formatting.HelpFormatter.write_usage click.formatting.wrap_text
#: click.globals.get_current_context click.parser.OptionParser
#: click.parser.OptionParser.add_argument click.parser.OptionParser.add_option
#: click.parser.OptionParser.parse_args click.shell_completion.CompletionItem
#: click.shell_completion.ShellComplete
#: click.shell_completion.ShellComplete.format_completion
#: click.shell_completion.ShellComplete.get_completions
#: click.shell_completion.add_completion_class click.termui.confirm
#: click.termui.echo_via_pager click.termui.edit click.termui.getchar
#: click.termui.launch click.termui.pause click.termui.progressbar
#: click.termui.prompt click.termui.secho click.termui.style
#: click.termui.unstyle click.testing.CliRunner
#: click.testing.CliRunner.get_default_prog_name click.testing.CliRunner.invoke
#: click.testing.CliRunner.isolated_filesystem
#: click.testing.CliRunner.isolation click.testing.CliRunner.make_env
#: click.testing.Result click.types.Choice click.types.DateTime
#: click.types.File click.types.FloatRange click.types.IntRange
#: click.types.ParamType.convert click.types.ParamType.fail
#: click.types.ParamType.get_metavar click.types.ParamType.get_missing_message
#: click.types.ParamType.shell_complete
#: click.types.ParamType.split_envvar_value click.types.Path click.types.Tuple
#: click.utils.echo click.utils.format_filename click.utils.get_app_dir
#: click.utils.get_binary_stream click.utils.get_text_stream
#: click.utils.open_file of
msgid "Parameters"
msgstr ""

#: click.decorators.command:15 of
msgid "the name of the command.  This defaults to the function name with underscores replaced by dashes."
msgstr ""

#: click.decorators.command:17 of
msgid "the command class to instantiate.  This defaults to :class:`Command`."
msgstr ""

#: click.BOOL click.FLOAT click.INT click.STRING click.UNPROCESSED click.UUID
#: click.core.Argument click.core.BaseCommand click.core.BaseCommand.invoke
#: click.core.BaseCommand.main click.core.BaseCommand.make_context
#: click.core.BaseCommand.parse_args click.core.BaseCommand.shell_complete
#: click.core.BaseCommand.to_info_dict click.core.Command
#: click.core.Command.collect_usage_pieces click.core.Command.format_epilog
#: click.core.Command.format_help click.core.Command.format_help_text
#: click.core.Command.format_options click.core.Command.format_usage
#: click.core.Command.get_help click.core.Command.get_help_option
#: click.core.Command.get_help_option_names
#: click.core.Command.get_short_help_str click.core.Command.get_usage
#: click.core.Command.invoke click.core.Command.make_parser
#: click.core.Command.parse_args click.core.Command.shell_complete
#: click.core.Command.to_info_dict click.core.CommandCollection
#: click.core.CommandCollection.add_source
#: click.core.CommandCollection.get_command
#: click.core.CommandCollection.list_commands click.core.Context
#: click.core.Context.abort click.core.Context.call_on_close
#: click.core.Context.close click.core.Context.ensure_object
#: click.core.Context.exit click.core.Context.fail
#: click.core.Context.find_object click.core.Context.find_root
#: click.core.Context.forward click.core.Context.get_help
#: click.core.Context.get_parameter_source click.core.Context.get_usage
#: click.core.Context.invoke click.core.Context.lookup_default
#: click.core.Context.make_formatter click.core.Context.scope
#: click.core.Context.set_parameter_source click.core.Context.to_info_dict
#: click.core.Context.with_resource click.core.Group
#: click.core.Group.add_command click.core.Group.command
#: click.core.Group.get_command click.core.Group.group
#: click.core.Group.list_commands click.core.MultiCommand
#: click.core.MultiCommand.collect_usage_pieces
#: click.core.MultiCommand.format_commands
#: click.core.MultiCommand.format_options click.core.MultiCommand.get_command
#: click.core.MultiCommand.invoke click.core.MultiCommand.list_commands
#: click.core.MultiCommand.parse_args click.core.MultiCommand.result_callback
#: click.core.MultiCommand.shell_complete click.core.MultiCommand.to_info_dict
#: click.core.Option click.core.Parameter click.core.Parameter.get_default
#: click.core.Parameter.get_error_hint click.core.Parameter.shell_complete
#: click.core.Parameter.to_info_dict click.core.Parameter.type_cast_value
#: click.decorators.argument click.decorators.command
#: click.decorators.confirmation_option click.decorators.group
#: click.decorators.help_option click.decorators.make_pass_decorator
#: click.decorators.option click.decorators.pass_context
#: click.decorators.pass_meta_key click.decorators.pass_obj
#: click.decorators.password_option click.decorators.version_option
#: click.exceptions.BadArgumentUsage click.exceptions.BadOptionUsage
#: click.exceptions.BadParameter click.exceptions.ClickException
#: click.exceptions.FileError click.exceptions.NoSuchOption
#: click.exceptions.UsageError click.formatting.HelpFormatter
#: click.formatting.HelpFormatter.dedent
#: click.formatting.HelpFormatter.getvalue
#: click.formatting.HelpFormatter.indent
#: click.formatting.HelpFormatter.indentation
#: click.formatting.HelpFormatter.section click.formatting.HelpFormatter.write
#: click.formatting.HelpFormatter.write_dl
#: click.formatting.HelpFormatter.write_heading
#: click.formatting.HelpFormatter.write_paragraph
#: click.formatting.HelpFormatter.write_text
#: click.formatting.HelpFormatter.write_usage click.formatting.wrap_text
#: click.globals.get_current_context click.parser.OptionParser
#: click.parser.OptionParser.add_argument click.parser.OptionParser.add_option
#: click.parser.OptionParser.parse_args click.shell_completion.CompletionItem
#: click.shell_completion.ShellComplete
#: click.shell_completion.ShellComplete.complete
#: click.shell_completion.ShellComplete.format_completion
#: click.shell_completion.ShellComplete.get_completion_args
#: click.shell_completion.ShellComplete.get_completions
#: click.shell_completion.ShellComplete.source
#: click.shell_completion.ShellComplete.source_vars
#: click.shell_completion.add_completion_class click.termui.clear
#: click.termui.confirm click.termui.echo_via_pager click.termui.edit
#: click.termui.get_terminal_size click.termui.getchar click.termui.launch
#: click.termui.pause click.termui.progressbar click.termui.prompt
#: click.termui.secho click.termui.style click.termui.unstyle
#: click.testing.CliRunner click.testing.CliRunner.get_default_prog_name
#: click.testing.CliRunner.invoke click.testing.CliRunner.isolated_filesystem
#: click.testing.CliRunner.isolation click.testing.CliRunner.make_env
#: click.types.Choice click.types.File click.types.FloatRange
#: click.types.IntRange click.types.ParamType.convert
#: click.types.ParamType.fail click.types.ParamType.get_metavar
#: click.types.ParamType.get_missing_message
#: click.types.ParamType.shell_complete
#: click.types.ParamType.split_envvar_value click.types.ParamType.to_info_dict
#: click.types.Tuple click.utils.echo click.utils.format_filename
#: click.utils.get_app_dir click.utils.get_binary_stream
#: click.utils.get_text_stream click.utils.open_file of
msgid "Return type"
msgstr ""

#: click.decorators.group:1 of
msgid "Creates a new :class:`Group` with a function as callback.  This works otherwise the same as :func:`command` just that the `cls` parameter is set to :class:`Group`."
msgstr ""

#: click.decorators.argument:1 of
msgid "Attaches an argument to the command.  All positional arguments are passed as parameter declarations to :class:`Argument`; all keyword arguments are forwarded unchanged (except ``cls``). This is equivalent to creating an :class:`Argument` instance manually and attaching it to the :attr:`Command.params` list."
msgstr ""

#: click.decorators.argument:7 of
msgid "the argument class to instantiate.  This defaults to :class:`Argument`."
msgstr ""

#: click.decorators.option:1 of
msgid "Attaches an option to the command.  All positional arguments are passed as parameter declarations to :class:`Option`; all keyword arguments are forwarded unchanged (except ``cls``). This is equivalent to creating an :class:`Option` instance manually and attaching it to the :attr:`Command.params` list."
msgstr ""

#: click.decorators.option:7 of
msgid "the option class to instantiate.  This defaults to :class:`Option`."
msgstr ""

#: click.decorators.password_option:1 of
msgid "Add a ``--password`` option which prompts for a password, hiding input and asking to enter the value again for confirmation."
msgstr ""

#: click.decorators.password_option:4 of
msgid "One or more option names. Defaults to the single value ``\"--password\"``."
msgstr ""

#: click.decorators.confirmation_option:6 click.decorators.help_option:10
#: click.decorators.password_option:6 click.decorators.version_option:24 of
msgid "Extra arguments are passed to :func:`option`."
msgstr ""

#: click.decorators.confirmation_option:1 of
msgid "Add a ``--yes`` option which shows a prompt before continuing if not passed. If the prompt is declined, the program will exit."
msgstr ""

#: click.decorators.confirmation_option:4 of
msgid "One or more option names. Defaults to the single value ``\"--yes\"``."
msgstr ""

#: click.decorators.version_option:1 of
msgid "Add a ``--version`` option which immediately prints the version number and exits the program."
msgstr ""

#: click.decorators.version_option:4 of
msgid "If ``version`` is not provided, Click will try to detect it using :func:`importlib.metadata.version` to get the version for the ``package_name``. On Python < 3.8, the ``importlib_metadata`` backport must be installed."
msgstr ""

#: click.decorators.version_option:9 of
msgid "If ``package_name`` is not provided, Click will try to detect it by inspecting the stack frames. This will be used to detect the version, so it must match the name of the installed package."
msgstr ""

#: click.decorators.version_option:13 of
msgid "The version number to show. If not provided, Click will try to detect it."
msgstr ""

#: click.decorators.version_option:15 of
msgid "One or more option names. Defaults to the single value ``\"--version\"``."
msgstr ""

#: click.decorators.version_option:17 of
msgid "The package name to detect the version from. If not provided, Click will try to detect it."
msgstr ""

#: click.decorators.version_option:19 of
msgid "The name of the CLI to show in the message. If not provided, it will be detected from the command."
msgstr ""

#: click.decorators.version_option:21 of
#, python-format
msgid "The message to show. The values ``%(prog)s``, ``%(package)s``, and ``%(version)s`` are available. Defaults to ``\"%(prog)s, version %(version)s\"``."
msgstr ""

#: click.decorators.version_option of
msgid "Raises"
msgstr ""

#: click.decorators.version_option:25 of
msgid "``version`` could not be detected."
msgstr ""

#: click.decorators.version_option:27 of
#, python-format
msgid "Add the ``package_name`` parameter, and the ``%(package)s`` value for messages."
msgstr ""

#: click.decorators.version_option:31 of
msgid "Use :mod:`importlib.metadata` instead of ``pkg_resources``. The version is detected based on the package name, not the entry point name. The Python package name must match the installed package name, or be passed with ``package_name=``."
msgstr ""

#: click.decorators.help_option:1 of
msgid "Add a ``--help`` option which immediately prints the help page and exits the program."
msgstr ""

#: click.decorators.help_option:4 of
msgid "This is usually unnecessary, as the ``--help`` option is added to each command automatically unless ``add_help_option=False`` is passed."
msgstr ""

#: click.decorators.help_option:8 of
msgid "One or more option names. Defaults to the single value ``\"--help\"``."
msgstr ""

#: click.decorators.pass_context:1 of
msgid "Marks a callback as wanting to receive the current context object as first argument."
msgstr ""

#: click.decorators.pass_obj:1 of
msgid "Similar to :func:`pass_context`, but only pass the object on the context onwards (:attr:`Context.obj`).  This is useful if that object represents the state of a nested system."
msgstr ""

#: click.decorators.make_pass_decorator:1 of
msgid "Given an object type this creates a decorator that will work similar to :func:`pass_obj` but instead of passing the object of the current context, it will find the innermost context of type :func:`object_type`."
msgstr ""

#: click.decorators.make_pass_decorator:6 of
msgid "This generates a decorator that works roughly like this::"
msgstr ""

#: click.decorators.make_pass_decorator:18 of
msgid "the type of the object to pass."
msgstr ""

#: click.decorators.make_pass_decorator:19 of
msgid "if set to `True`, a new object will be created and remembered on the context if it's not there yet."
msgstr ""

#: click.decorators.pass_meta_key:1 of
msgid "Create a decorator that passes a key from :attr:`click.Context.meta` as the first argument to the decorated function."
msgstr ""

#: click.decorators.pass_meta_key:5 of
msgid "Key in ``Context.meta`` to pass."
msgstr ""

#: click.decorators.pass_meta_key:6 of
msgid "Description of the object being passed, inserted into the decorator's docstring. Defaults to \"the 'key' key from Context.meta\"."
msgstr ""

#: ../../click/docs/api.rst:38
msgid "Utilities"
msgstr ""

#: click.utils.echo:1 of
msgid "Print a message and newline to stdout or a file. This should be used instead of :func:`print` because it provides better support for different data, files, and environments."
msgstr ""

#: click.utils.echo:5 of
msgid "Compared to :func:`print`, this does the following:"
msgstr ""

#: click.utils.echo:7 of
msgid "Ensures that the output encoding is not misconfigured on Linux."
msgstr ""

#: click.utils.echo:8 of
msgid "Supports Unicode in the Windows console."
msgstr ""

#: click.utils.echo:9 of
msgid "Supports writing to binary outputs, and supports writing bytes to text outputs."
msgstr ""

#: click.utils.echo:11 of
msgid "Supports colors and styles on Windows."
msgstr ""

#: click.utils.echo:12 of
msgid "Removes ANSI color and style codes if the output does not look like an interactive terminal."
msgstr ""

#: click.utils.echo:14 of
msgid "Always flushes the output."
msgstr ""

#: click.utils.echo:16 of
msgid "The string or bytes to output. Other objects are converted to strings."
msgstr ""

#: click.utils.echo:18 of
msgid "The file to write to. Defaults to ``stdout``."
msgstr ""

#: click.utils.echo:19 of
msgid "Write to ``stderr`` instead of ``stdout``."
msgstr ""

#: click.utils.echo:20 of
msgid "Print a newline after the message. Enabled by default."
msgstr ""

#: click.utils.echo:21 of
msgid "Force showing or hiding colors and other styles. By default Click will remove color if the output does not look like an interactive terminal."
msgstr ""

#: click.utils.echo:25 of
msgid "Support Unicode output on the Windows console. Click does not modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()`` will still not support Unicode."
msgstr ""

#: click.testing.CliRunner.invoke:25 click.testing.CliRunner.isolation:18
#: click.utils.echo:30 of
msgid "Added the ``color`` parameter."
msgstr ""

#: click.termui.confirm:19 click.utils.echo:33 of
msgid "Added the ``err`` parameter."
msgstr ""

#: click.utils.echo:36 of
msgid "Support colors on Windows if colorama is installed."
msgstr ""

#: click.termui.echo_via_pager:1 of
msgid "This function takes a text and shows it via an environment specific pager on stdout."
msgstr ""

#: click.termui.echo_via_pager:4 of
msgid "Added the `color` flag."
msgstr ""

#: click.termui.echo_via_pager:7 of
msgid "the text to page, or alternatively, a generator emitting the text to page."
msgstr ""

#: click.termui.echo_via_pager:9 of
msgid "controls if the pager supports ANSI colors or not.  The default is autodetection."
msgstr ""

#: click.termui.prompt:1 of
msgid "Prompts a user for input.  This is a convenience function that can be used to prompt a user for input later."
msgstr ""

#: click.termui.prompt:4 of
msgid "If the user aborts the input by sending a interrupt signal, this function will catch it and raise a :exc:`Abort` exception."
msgstr ""

#: click.termui.prompt:7 of
msgid "the text to show for the prompt."
msgstr ""

#: click.termui.prompt:8 of
msgid "the default value to use if no input happens.  If this is not given it will prompt until it's aborted."
msgstr ""

#: click.termui.prompt:10 of
msgid "if this is set to true then the input value will be hidden."
msgstr ""

#: click.termui.prompt:12 of
msgid "Prompt a second time to confirm the value. Can be set to a string instead of ``True`` to customize the message."
msgstr ""

#: click.termui.prompt:15 of
msgid "the type to use to check the value against."
msgstr ""

#: click.termui.prompt:16 of
msgid "if this parameter is provided it's a function that is invoked instead of the type conversion to convert a value."
msgstr ""

#: click.termui.confirm:11 click.termui.prompt:19 of
msgid "a suffix that should be added to the prompt."
msgstr ""

#: click.termui.confirm:12 click.termui.prompt:20 of
msgid "shows or hides the default value in the prompt."
msgstr ""

#: click.termui.confirm:13 click.termui.prompt:21 of
msgid "if set to true the file defaults to ``stderr`` instead of ``stdout``, the same as with echo."
msgstr ""

#: click.termui.prompt:23 of
msgid "Show or hide choices if the passed type is a Choice. For example if type is a Choice of either day or week, show_choices is true and text is \"Group by\" then the prompt will be \"Group by (day, week): \"."
msgstr ""

#: click.termui.prompt:28 of
msgid "``confirmation_prompt`` can be a custom string."
msgstr ""

#: click.termui.prompt:31 of
msgid "Added the ``show_choices`` parameter."
msgstr ""

#: click.termui.prompt:34 of
msgid "Added unicode support for cmd.exe on Windows."
msgstr ""

#: click.termui.pause:8 click.termui.prompt:37 of
msgid "Added the `err` parameter."
msgstr ""

#: click.termui.confirm:1 of
msgid "Prompts for confirmation (yes/no question)."
msgstr ""

#: click.termui.confirm:3 of
msgid "If the user aborts the input by sending a interrupt signal this function will catch it and raise a :exc:`Abort` exception."
msgstr ""

#: click.termui.confirm:6 of
msgid "the question to ask."
msgstr ""

#: click.termui.confirm:7 of
msgid "The default value to use when no input is given. If ``None``, repeat until input is given."
msgstr ""

#: click.termui.confirm:9 of
msgid "if this is set to `True` a negative answer aborts the exception by raising :exc:`Abort`."
msgstr ""

#: click.termui.confirm:16 of
msgid "Repeat until input is given if ``default`` is ``None``."
msgstr ""

#: click.termui.progressbar:1 of
msgid "This function creates an iterable context manager that can be used to iterate over something while showing a progress bar.  It will either iterate over the `iterable` or `length` items (that are counted up).  While iteration happens, this function will print a rendered progress bar to the given `file` (defaults to stdout) and will attempt to calculate remaining time and more.  By default, this progress bar will not be rendered if the file is not a terminal."
msgstr ""

#: click.termui.progressbar:9 of
msgid "The context manager creates the progress bar.  When the context manager is entered the progress bar is already created.  With every iteration over the progress bar, the iterable passed to the bar is advanced and the bar is updated.  When the context manager exits, a newline is printed and the progress bar is finalized on screen."
msgstr ""

#: click.termui.progressbar:15 of
msgid "Note: The progress bar is currently designed for use cases where the total progress can be expected to take at least several seconds. Because of this, the ProgressBar class object won't display progress that is considered too fast, and progress where the time between steps is less than a second."
msgstr ""

#: click.termui.progressbar:21 of
msgid "No printing must happen or the progress bar will be unintentionally destroyed."
msgstr ""

#: click.Context.meta:12 click.core.Context.scope:10
#: click.termui.progressbar:24 of
msgid "Example usage::"
msgstr ""

#: click.termui.progressbar:30 of
msgid "Alternatively, if no iterable is specified, one can manually update the progress bar through the `update()` method instead of directly iterating over the progress bar.  The update method accepts the number of steps to increment the bar with::"
msgstr ""

#: click.termui.progressbar:40 of
msgid "The ``update()`` method also takes an optional value specifying the ``current_item`` at the new position. This is useful when used together with ``item_show_func`` to customize the output for each manual step::"
msgstr ""

#: click.termui.progressbar:54 of
msgid "an iterable to iterate over.  If not provided the length is required."
msgstr ""

#: click.termui.progressbar:56 of
msgid "the number of items to iterate over.  By default the progressbar will attempt to ask the iterator about its length, which might or might not work.  If an iterable is also provided this parameter can be used to override the length.  If an iterable is not provided the progress bar will iterate over a range of that length."
msgstr ""

#: click.termui.progressbar:62 of
msgid "the label to show next to the progress bar."
msgstr ""

#: click.termui.progressbar:63 of
msgid "enables or disables the estimated time display.  This is automatically disabled if the length cannot be determined."
msgstr ""

#: click.termui.progressbar:66 of
msgid "enables or disables the percentage display.  The default is `True` if the iterable has a length or `False` if not."
msgstr ""

#: click.termui.progressbar:69 of
msgid "enables or disables the absolute position display.  The default is `False`."
msgstr ""

#: click.termui.progressbar:71 of
msgid "A function called with the current item which can return a string to show next to the progress bar. If the function returns ``None`` nothing is shown. The current item can be ``None``, such as when entering and exiting the bar."
msgstr ""

#: click.termui.progressbar:75 of
msgid "the character to use to show the filled part of the progress bar."
msgstr ""

#: click.termui.progressbar:77 of
msgid "the character to use to show the non-filled part of the progress bar."
msgstr ""

#: click.termui.progressbar:79 of
msgid "the format string to use as template for the bar. The parameters in it are ``label`` for the label, ``bar`` for the progress bar and ``info`` for the info section."
msgstr ""

#: click.termui.progressbar:83 of
msgid "the separator between multiple info items (eta etc.)"
msgstr ""

#: click.termui.progressbar:84 of
msgid "the width of the progress bar in characters, 0 means full terminal width"
msgstr ""

#: click.termui.progressbar:86 of
msgid "The file to write to. If this is not a terminal then only the label is printed."
msgstr ""

#: click.termui.progressbar:88 of
msgid "controls if the terminal supports ANSI colors or not.  The default is autodetection.  This is only needed if ANSI codes are included anywhere in the progress bar output which is not the case by default."
msgstr ""

#: click.termui.progressbar:92 of
msgid "Render only when this many updates have completed. This allows tuning for very fast iterators."
msgstr ""

#: click.termui.progressbar:95 of
msgid "Output is shown even if execution time is less than 0.5 seconds."
msgstr ""

#: click.termui.progressbar:98 of
msgid "``item_show_func`` shows the current item, not the previous one."
msgstr ""

#: click.termui.progressbar:101 of
msgid "Labels are echoed if the output is not a TTY. Reverts a change in 7.0 that removed all output."
msgstr ""

#: click.termui.progressbar:105 of
msgid "Added the ``update_min_steps`` parameter."
msgstr ""

#: click.termui.progressbar:108 of
msgid "Added the ``color`` parameter. Added the ``update`` method to the object."
msgstr ""

#: click.termui.clear:1 of
msgid "Clears the terminal screen.  This will have the effect of clearing the whole visible space of the terminal and moving the cursor to the top left.  This does not do anything if not connected to a terminal."
msgstr ""

#: click.termui.style:1 of
msgid "Styles a text with ANSI styles and returns the new string.  By default the styling is self contained which means that at the end of the string a reset code is issued.  This can be prevented by passing ``reset=False``."
msgstr ""

#: click.termui.launch:7 click.termui.style:6 of
msgid "Examples::"
msgstr ""

#: click.termui.style:13 of
msgid "Supported color names:"
msgstr ""

#: click.termui.style:15 of
msgid "``black`` (might be a gray)"
msgstr ""

#: click.termui.style:16 of
msgid "``red``"
msgstr ""

#: click.termui.style:17 of
msgid "``green``"
msgstr ""

#: click.termui.style:18 of
msgid "``yellow`` (might be an orange)"
msgstr ""

#: click.termui.style:19 of
msgid "``blue``"
msgstr ""

#: click.termui.style:20 of
msgid "``magenta``"
msgstr ""

#: click.termui.style:21 of
msgid "``cyan``"
msgstr ""

#: click.termui.style:22 of
msgid "``white`` (might be light gray)"
msgstr ""

#: click.termui.style:23 of
msgid "``bright_black``"
msgstr ""

#: click.termui.style:24 of
msgid "``bright_red``"
msgstr ""

#: click.termui.style:25 of
msgid "``bright_green``"
msgstr ""

#: click.termui.style:26 of
msgid "``bright_yellow``"
msgstr ""

#: click.termui.style:27 of
msgid "``bright_blue``"
msgstr ""

#: click.termui.style:28 of
msgid "``bright_magenta``"
msgstr ""

#: click.termui.style:29 of
msgid "``bright_cyan``"
msgstr ""

#: click.termui.style:30 of
msgid "``bright_white``"
msgstr ""

#: click.termui.style:31 of
msgid "``reset`` (reset the color code only)"
msgstr ""

#: click.termui.style:33 of
msgid "If the terminal supports it, color may also be specified as:"
msgstr ""

#: click.termui.style:35 of
msgid "An integer in the interval [0, 255]. The terminal must support 8-bit/256-color mode."
msgstr ""

#: click.termui.style:37 of
msgid "An RGB tuple of three integers in [0, 255]. The terminal must support 24-bit/true-color mode."
msgstr ""

#: click.termui.style:40 of
msgid "See https://en.wikipedia.org/wiki/ANSI_color and https://gist.github.com/XVilka/8346728 for more information."
msgstr ""

#: click.termui.style:43 of
msgid "the string to style with ansi codes."
msgstr ""

#: click.termui.style:44 of
msgid "if provided this will become the foreground color."
msgstr ""

#: click.termui.style:45 of
msgid "if provided this will become the background color."
msgstr ""

#: click.termui.style:46 of
msgid "if provided this will enable or disable bold mode."
msgstr ""

#: click.termui.style:47 of
msgid "if provided this will enable or disable dim mode.  This is badly supported."
msgstr ""

#: click.termui.style:49 of
msgid "if provided this will enable or disable underline."
msgstr ""

#: click.termui.style:50 of
msgid "if provided this will enable or disable overline."
msgstr ""

#: click.termui.style:51 of
msgid "if provided this will enable or disable italic."
msgstr ""

#: click.termui.style:52 of
msgid "if provided this will enable or disable blinking."
msgstr ""

#: click.termui.style:53 of
msgid "if provided this will enable or disable inverse rendering (foreground becomes background and the other way round)."
msgstr ""

#: click.termui.style:56 of
msgid "if provided this will enable or disable striking through text."
msgstr ""

#: click.termui.style:58 of
msgid "by default a reset-all code is added at the end of the string which means that styles do not carry over.  This can be disabled to compose styles."
msgstr ""

#: click.termui.style:62 of
msgid "A non-string ``message`` is converted to a string."
msgstr ""

#: click.termui.style:65 of
msgid "Added support for 256 and RGB color codes."
msgstr ""

#: click.termui.style:68 of
msgid "Added the ``strikethrough``, ``italic``, and ``overline`` parameters."
msgstr ""

#: click.termui.style:72 of
msgid "Added support for bright colors."
msgstr ""

#: click.termui.unstyle:1 of
msgid "Removes ANSI styling information from a string.  Usually it's not necessary to use this function as Click's echo function will automatically remove styling if necessary."
msgstr ""

#: click.termui.unstyle:7 of
msgid "the text to remove style information from."
msgstr ""

#: click.termui.secho:1 of
msgid "This function combines :func:`echo` and :func:`style` into one call.  As such the following two calls are the same::"
msgstr ""

#: click.termui.secho:7 of
msgid "All keyword arguments are forwarded to the underlying functions depending on which one they go with."
msgstr ""

#: click.termui.secho:10 of
msgid "Non-string types will be converted to :class:`str`. However, :class:`bytes` are passed directly to :meth:`echo` without applying style. If you want to style bytes that represent text, call :meth:`bytes.decode` first."
msgstr ""

#: click.termui.secho:15 of
msgid "A non-string ``message`` is converted to a string. Bytes are passed through without style applied."
msgstr ""

#: click.termui.edit:1 of
msgid "Edits the given text in the defined editor.  If an editor is given (should be the full path to the executable but the regular operating system search path is used for finding the executable) it overrides the detected editor.  Optionally, some environment variables can be used.  If the editor is closed without changes, `None` is returned.  In case a file is edited directly the return value is always `None` and `require_save` and `extension` are ignored."
msgstr ""

#: click.termui.edit:9 of
msgid "If the editor cannot be opened a :exc:`UsageError` is raised."
msgstr ""

#: click.termui.edit:11 of
msgid "Note for Windows: to simplify cross-platform usage, the newlines are automatically converted from POSIX to Windows and vice versa.  As such, the message here will have ``\\n`` as newline markers."
msgstr ""

#: click.termui.edit:15 of
msgid "the text to edit."
msgstr ""

#: click.termui.edit:16 of
msgid "optionally the editor to use.  Defaults to automatic detection."
msgstr ""

#: click.termui.edit:18 of
msgid "environment variables to forward to the editor."
msgstr ""

#: click.termui.edit:19 of
msgid "if this is true, then not saving in the editor will make the return value become `None`."
msgstr ""

#: click.termui.edit:21 of
msgid "the extension to tell the editor about.  This defaults to `.txt` but changing this might change syntax highlighting."
msgstr ""

#: click.termui.edit:24 of
msgid "if provided it will edit this file instead of the provided text contents.  It will not use a temporary file as an indirection in that case."
msgstr ""

#: click.termui.launch:1 of
msgid "This function launches the given URL (or filename) in the default viewer application for this file type.  If this is an executable, it might launch the executable in a new session.  The return value is the exit code of the launched application.  Usually, ``0`` indicates success."
msgstr ""

#: click.termui.launch:14 of
msgid "URL or filename of the thing to launch."
msgstr ""

#: click.termui.launch:15 of
msgid "Wait for the program to exit before returning. This only works if the launched program blocks. In particular, ``xdg-open`` on Linux does not block."
msgstr ""

#: click.termui.launch:18 of
msgid "if this is set to `True` then instead of launching the application associated with the URL it will attempt to launch a file manager with the file located.  This might have weird effects if the URL does not point to the filesystem."
msgstr ""

#: click.termui.getchar:1 of
msgid "Fetches a single character from the terminal and returns it.  This will always return a unicode character and under certain rare circumstances this might return more than one character.  The situations which more than one character is returned is when for whatever reason multiple characters end up in the terminal buffer or standard input was not actually a terminal."
msgstr ""

#: click.termui.getchar:8 of
msgid "Note that this will always read from the terminal, even if something is piped into the standard input."
msgstr ""

#: click.termui.getchar:11 of
msgid "Note for Windows: in rare cases when typing non-ASCII characters, this function might wait for a second character and then return both at once. This is because certain Unicode characters look like special-key markers."
msgstr ""

#: click.termui.getchar:17 of
msgid "if set to `True`, the character read will also show up on the terminal.  The default is to not show it."
msgstr ""

#: click.termui.pause:1 of
msgid "This command stops execution and waits for the user to press any key to continue.  This is similar to the Windows batch \"pause\" command.  If the program is not run through a terminal, this command will instead do nothing."
msgstr ""

#: click.termui.pause:11 of
msgid "The message to print before pausing. Defaults to ``\"Press any key to continue...\"``."
msgstr ""

#: click.termui.pause:13 of
msgid "if set to message goes to ``stderr`` instead of ``stdout``, the same as with echo."
msgstr ""

#: click.termui.get_terminal_size:1 of
msgid "Returns the current size of the terminal as tuple in the form ``(width, height)`` in columns and rows."
msgstr ""

#: click.termui.get_terminal_size:4 of
msgid "Will be removed in Click 8.1. Use :func:`shutil.get_terminal_size` instead."
msgstr ""

#: click.utils.get_binary_stream:1 of
msgid "Returns a system stream for byte processing."
msgstr ""

#: click.utils.get_binary_stream:3 click.utils.get_text_stream:6 of
msgid "the name of the stream to open.  Valid names are ``'stdin'``, ``'stdout'`` and ``'stderr'``"
msgstr ""

#: click.utils.get_text_stream:1 of
msgid "Returns a system stream for text processing.  This usually returns a wrapped stream around a binary stream returned from :func:`get_binary_stream` but it also can take shortcuts for already correctly configured streams."
msgstr ""

#: click.utils.get_text_stream:8 of
msgid "overrides the detected default encoding."
msgstr ""

#: click.utils.get_text_stream:9 of
msgid "overrides the default error mode."
msgstr ""

#: click.utils.open_file:1 of
msgid "This is similar to how the :class:`File` works but for manual usage.  Files are opened non lazy by default.  This can open regular files as well as stdin/stdout if ``'-'`` is passed."
msgstr ""

#: click.utils.open_file:5 of
msgid "If stdin/stdout is returned the stream is wrapped so that the context manager will not close the stream accidentally.  This makes it possible to always use the function like this without having to worry to accidentally close a standard stream::"
msgstr ""

#: click.utils.open_file:15 of
msgid "the name of the file to open (or ``'-'`` for stdin/stdout)."
msgstr ""

#: click.utils.open_file:16 of
msgid "the mode in which to open the file."
msgstr ""

#: click.utils.open_file:17 of
msgid "the encoding to use."
msgstr ""

#: click.utils.open_file:18 of
msgid "the error handling for this file."
msgstr ""

#: click.utils.open_file:19 of
msgid "can be flipped to true to open the file lazily."
msgstr ""

#: click.utils.open_file:20 of
msgid "in atomic mode writes go into a temporary file and it's moved on close."
msgstr ""

#: click.utils.get_app_dir:1 of
msgid "Returns the config folder for the application.  The default behavior is to return whatever is most appropriate for the operating system."
msgstr ""

#: click.utils.get_app_dir:4 of
msgid "To give you an idea, for an app called ``\"Foo Bar\"``, something like the following folders could be returned:"
msgstr ""

#: click.utils.get_app_dir:7 of
msgid "Mac OS X:"
msgstr ""

#: click.utils.get_app_dir:8 of
msgid "``~/Library/Application Support/Foo Bar``"
msgstr ""

#: click.utils.get_app_dir:9 of
msgid "Mac OS X (POSIX):"
msgstr ""

#: click.utils.get_app_dir:10 click.utils.get_app_dir:14 of
msgid "``~/.foo-bar``"
msgstr ""

#: click.utils.get_app_dir:11 of
msgid "Unix:"
msgstr ""

#: click.utils.get_app_dir:12 of
msgid "``~/.config/foo-bar``"
msgstr ""

#: click.utils.get_app_dir:13 of
msgid "Unix (POSIX):"
msgstr ""

#: click.utils.get_app_dir:15 of
msgid "Windows (roaming):"
msgstr ""

#: click.utils.get_app_dir:16 of
msgid "``C:\\Users\\<user>\\AppData\\Roaming\\Foo Bar``"
msgstr ""

#: click.utils.get_app_dir:18 of
msgid "Windows (not roaming):"
msgstr ""

#: click.utils.get_app_dir:18 of
msgid "``C:\\Users\\<user>\\AppData\\Local\\Foo Bar``"
msgstr ""

#: click.utils.get_app_dir:22 of
msgid "the application name.  This should be properly capitalized and can contain whitespace."
msgstr ""

#: click.utils.get_app_dir:24 of
msgid "controls if the folder should be roaming or not on Windows. Has no affect otherwise."
msgstr ""

#: click.utils.get_app_dir:26 of
msgid "if this is set to `True` then on any POSIX system the folder will be stored in the home folder with a leading dot instead of the XDG config home or darwin's application support folder."
msgstr ""

#: click.utils.format_filename:1 of
msgid "Formats a filename for user display.  The main purpose of this function is to ensure that the filename can be displayed at all.  This will decode the filename to unicode if necessary in a way that it will not fail.  Optionally, it can shorten the filename to not include the full path to the filename."
msgstr ""

#: click.utils.format_filename:7 of
msgid "formats a filename for UI display.  This will also convert the filename into unicode without failing."
msgstr ""

#: click.utils.format_filename:9 of
msgid "this optionally shortens the filename to strip of the path that leads up to it."
msgstr ""

#: ../../click/docs/api.rst:79
msgid "Commands"
msgstr ""

#: click.core.BaseCommand:1 of
msgid "The base command implements the minimal API contract of commands. Most code will never use this as it does not implement a lot of useful functionality but it can act as the direct subclass of alternative parsing methods that do not depend on the Click parser."
msgstr ""

#: click.core.BaseCommand:6 of
msgid "For instance, this can be used to bridge Click and other systems like argparse or docopt."
msgstr ""

#: click.core.BaseCommand:9 of
msgid "Because base commands do not implement a lot of the API that other parts of Click take for granted, they are not supported for all operations.  For instance, they cannot be used with the decorators usually and they have no built-in callback system."
msgstr ""

#: click.core.BaseCommand:14 click.core.Command:5 of
msgid "Added the `context_settings` parameter."
msgstr ""

#: click.core.BaseCommand:17 click.core.Command:12 of
msgid "the name of the command to use unless a group overrides it."
msgstr ""

#: click.core.BaseCommand:18 click.core.Command:13 of
msgid "an optional dictionary with defaults that are passed to the context object."
msgstr ""

#: ../../docstring click.BaseCommand.allow_extra_args:1 of
msgid "the default for the :attr:`Context.allow_extra_args` flag."
msgstr ""

#: ../../docstring click.BaseCommand.allow_interspersed_args:1 of
msgid "the default for the :attr:`Context.allow_interspersed_args` flag."
msgstr ""

#: click.core.Context:1 of
msgid "The context class to create with :meth:`make_context`."
msgstr ""

#: ../../docstring click.BaseCommand.context_settings:1 of
msgid "an optional dictionary with defaults passed to the context."
msgstr ""

#: ../../docstring click.BaseCommand.ignore_unknown_options:1 of
msgid "the default for the :attr:`Context.ignore_unknown_options` flag."
msgstr ""

#: click.core.BaseCommand.invoke:1 of
msgid "Given a context, this invokes the command.  The default implementation is raising a not implemented error."
msgstr ""

#: click.core.BaseCommand.main:1 of
msgid "This is the way to invoke a script with all the bells and whistles as a command line application.  This will always terminate the application after a call.  If this is not wanted, ``SystemExit`` needs to be caught."
msgstr ""

#: click.core.BaseCommand.main:6 of
msgid "This method is also available by directly calling the instance of a :class:`Command`."
msgstr ""

#: click.core.BaseCommand.main:9 of
msgid "the arguments that should be used for parsing.  If not provided, ``sys.argv[1:]`` is used."
msgstr ""

#: click.core.BaseCommand.main:11 of
msgid "the program name that should be used.  By default the program name is constructed by taking the file name from ``sys.argv[0]``."
msgstr ""

#: click.core.BaseCommand.main:14 of
msgid "the environment variable that controls the bash completion support.  The default is ``\"_<prog_name>_COMPLETE\"`` with prog_name in uppercase."
msgstr ""

#: click.core.BaseCommand.main:18 of
msgid "the default behavior is to invoke the script in standalone mode.  Click will then handle exceptions and convert them into error messages and the function will never return but shut down the interpreter.  If this is set to `False` they will be propagated to the caller and the return value of this function is the return value of :meth:`invoke`."
msgstr ""

#: click.core.BaseCommand.main:27 of
msgid "Expand glob patterns, user dir, and env vars in command line args on Windows."
msgstr ""

#: click.core.BaseCommand.main:29 of
msgid "extra keyword arguments are forwarded to the context constructor.  See :class:`Context` for more information."
msgstr ""

#: click.core.BaseCommand.main:32 of
msgid "Added the ``windows_expand_args`` parameter to allow disabling command line arg expansion on Windows."
msgstr ""

#: click.core.BaseCommand.main:36 of
msgid "When taking arguments from ``sys.argv`` on Windows, glob patterns, user dir, and env vars are expanded."
msgstr ""

#: click.core.BaseCommand.main:40 of
msgid "Added the ``standalone_mode`` parameter."
msgstr ""

#: click.core.BaseCommand.make_context:1 of
msgid "This function when given an info name and arguments will kick off the parsing and create a new :class:`Context`.  It does not invoke the actual command callback though."
msgstr ""

#: click.core.BaseCommand.make_context:5 of
msgid "To quickly customize the context class used without overriding this method, set the :attr:`context_class` attribute."
msgstr ""

#: click.core.BaseCommand.make_context:8 of
msgid "the info name for this invocation.  Generally this is the most descriptive name for the script or command.  For the toplevel script it's usually the name of the script, for commands below it it's the name of the command."
msgstr ""

#: click.core.BaseCommand.make_context:13 of
msgid "the arguments to parse as list of strings."
msgstr ""

#: click.core.BaseCommand.make_context:14 of
msgid "the parent context if available."
msgstr ""

#: click.core.BaseCommand.make_context:15 of
msgid "extra keyword arguments forwarded to the context constructor."
msgstr ""

#: click.core.BaseCommand.make_context:18 of
msgid "Added the :attr:`context_class` attribute."
msgstr ""

#: ../../docstring click.BaseCommand.name:1 of
msgid "the name the command thinks it has.  Upon registering a command on a :class:`Group` the group will default the command name with this information.  You should instead use the :class:`Context`\\'s :attr:`~Context.info_name` attribute."
msgstr ""

#: click.core.BaseCommand.parse_args:1 click.core.Command.parse_args:1
#: click.core.MultiCommand.parse_args:1 of
msgid "Given a context and a list of arguments this creates the parser and parses the arguments, then modifies the context as necessary. This is automatically invoked by :meth:`make_context`."
msgstr ""

#: click.core.BaseCommand.shell_complete:1 of
msgid "Return a list of completions for the incomplete value. Looks at the names of chained multi-commands."
msgstr ""

#: click.core.BaseCommand.shell_complete:4 of
msgid "Any command could be part of a chained multi-command, so sibling commands are valid at any point during command completion. Other command classes will return more completions."
msgstr ""

#: click.core.BaseCommand.shell_complete:8 click.core.Command.shell_complete:4
#: click.core.MultiCommand.shell_complete:5
#: click.core.Parameter.shell_complete:6 click.types.ParamType.shell_complete:7
#: of
msgid "Invocation context for this command."
msgstr ""

#: click.core.BaseCommand.shell_complete:9 click.core.Command.shell_complete:5
#: click.core.MultiCommand.shell_complete:6
#: click.core.Parameter.shell_complete:7
#: click.shell_completion.ShellComplete.get_completions:6
#: click.types.ParamType.shell_complete:9 of
msgid "Value being completed. May be empty."
msgstr ""

#: click.core.BaseCommand.to_info_dict:1 click.core.Command.to_info_dict:1
#: click.core.MultiCommand.to_info_dict:1 of
msgid "Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire structure below this command."
msgstr ""

#: click.core.BaseCommand.to_info_dict:5 click.core.Command.to_info_dict:5
#: click.core.MultiCommand.to_info_dict:5 click.core.Parameter.to_info_dict:4
#: click.types.ParamType.to_info_dict:4 of
msgid "Use :meth:`click.Context.to_info_dict` to traverse the entire CLI structure."
msgstr ""

#: click.core.BaseCommand.to_info_dict:8 click.core.Command.to_info_dict:8
#: click.core.MultiCommand.to_info_dict:8 of
msgid "A :class:`Context` representing this command."
msgstr ""

#: click.core.Command:1 of
msgid "Commands are the basic building block of command line interfaces in Click.  A basic command handles command line parsing and might dispatch more parsing to commands nested below it."
msgstr ""

#: click.core.Command:7 of
msgid "Added repr showing the command name"
msgstr ""

#: click.core.Command:9 of
msgid "Added the `no_args_is_help` parameter."
msgstr ""

#: click.core.Command:15 of
msgid "the callback to invoke.  This is optional."
msgstr ""

#: click.core.Command:16 of
msgid "the parameters to register with this command.  This can be either :class:`Option` or :class:`Argument` objects."
msgstr ""

#: click.core.Command:18 of
msgid "the help string to use for this command."
msgstr ""

#: click.core.Command:19 of
msgid "like the help string but it's printed at the end of the help page after everything else."
msgstr ""

#: click.core.Command:21 of
msgid "the short help to use for this command.  This is shown on the command listing of the parent command."
msgstr ""

#: click.core.Command:23 of
msgid "by default each command registers a ``--help`` option.  This can be disabled by this parameter."
msgstr ""

#: click.core.Command:25 of
msgid "this controls what happens if no arguments are provided.  This option is disabled by default. If enabled this will add ``--help`` as argument if no arguments are passed"
msgstr ""

#: click.core.Command:29 of
msgid "hide this command from help outputs."
msgstr ""

#: click.core.Command:31 of
msgid "issues a message indicating that the command is deprecated."
msgstr ""

#: ../../docstring click.Command.callback:1 of
msgid "the callback to execute when the command fires.  This might be `None` in which case nothing happens."
msgstr ""

#: click.core.Command.collect_usage_pieces:1
#: click.core.MultiCommand.collect_usage_pieces:1 of
msgid "Returns all the pieces that go into the usage line and returns it as a list of strings."
msgstr ""

#: click.core.Command.format_epilog:1 of
msgid "Writes the epilog into the formatter if it exists."
msgstr ""

#: click.core.Command.format_help:1 of
msgid "Writes the help into the formatter if it exists."
msgstr ""

#: click.core.Command.format_help:3 of
msgid "This is a low-level method called by :meth:`get_help`."
msgstr ""

#: click.core.Command.format_help:5 of
msgid "This calls the following methods:"
msgstr ""

#: click.core.Command.format_help:7 of
msgid ":meth:`format_usage`"
msgstr ""

#: click.core.Command.format_help:8 of
msgid ":meth:`format_help_text`"
msgstr ""

#: click.core.Command.format_help:9 of
msgid ":meth:`format_options`"
msgstr ""

#: click.core.Command.format_help:10 of
msgid ":meth:`format_epilog`"
msgstr ""

#: click.core.Command.format_help_text:1 of
msgid "Writes the help text to the formatter if it exists."
msgstr ""

#: click.core.Command.format_options:1 click.core.MultiCommand.format_options:1
#: of
msgid "Writes all the options into the formatter if they exist."
msgstr ""

#: click.core.Command.format_usage:1 of
msgid "Writes the usage line into the formatter."
msgstr ""

#: click.core.Command.format_usage:3 of
msgid "This is a low-level method called by :meth:`get_usage`."
msgstr ""

#: click.core.Command.get_help:1 of
msgid "Formats the help into a string and returns it."
msgstr ""

#: click.core.Command.get_help:3 of
msgid "Calls :meth:`format_help` internally."
msgstr ""

#: click.core.Command.get_help_option:1 of
msgid "Returns the help option object."
msgstr ""

#: click.core.Command.get_help_option_names:1 of
msgid "Returns the names for the help option."
msgstr ""

#: click.core.Command.get_short_help_str:1 of
msgid "Gets short help for the command or makes it by shortening the long help string."
msgstr ""

#: click.core.Command.get_usage:1 of
msgid "Formats the usage line into a string and returns it."
msgstr ""

#: click.core.Command.get_usage:3 of
msgid "Calls :meth:`format_usage` internally."
msgstr ""

#: click.core.Command.invoke:1 click.core.MultiCommand.invoke:1 of
msgid "Given a context, this invokes the attached callback (if it exists) in the right way."
msgstr ""

#: click.core.Command.make_parser:1 of
msgid "Creates the underlying option parser for this command."
msgstr ""

#: ../../docstring click.Command.params:1 of
msgid "the list of parameters for this command in the order they should show up in the help page and execute.  Eager parameters will automatically be handled before non eager ones."
msgstr ""

#: click.core.Command.shell_complete:1 of
msgid "Return a list of completions for the incomplete value. Looks at the names of options and chained multi-commands."
msgstr ""

#: click.core.MultiCommand:1 of
msgid "A multi command is the basic implementation of a command that dispatches to subcommands.  The most common version is the :class:`Group`."
msgstr ""

#: click.core.MultiCommand:5 of
msgid "this controls how the multi command itself is invoked.  By default it's only invoked if a subcommand is provided."
msgstr ""

#: click.core.MultiCommand:8 of
msgid "this controls what happens if no arguments are provided.  This option is enabled by default if `invoke_without_command` is disabled or disabled if it's enabled.  If enabled this will add ``--help`` as argument if no arguments are passed."
msgstr ""

#: click.core.MultiCommand:14 of
msgid "the string that is used in the documentation to indicate the subcommand place."
msgstr ""

#: click.core.MultiCommand:16 of
msgid "if this is set to `True` chaining of multiple subcommands is enabled.  This restricts the form of commands in that they cannot have optional arguments but it allows multiple commands to be chained together."
msgstr ""

#: click.core.MultiCommand:20 of
msgid "The result callback to attach to this multi command. This can be set or changed later with the :meth:`result_callback` decorator."
msgstr ""

#: click.core.MultiCommand.format_commands:1 of
msgid "Extra format methods for multi methods that adds all the commands after the options."
msgstr ""

#: click.core.CommandCollection.get_command:1 click.core.Group.get_command:1
#: click.core.MultiCommand.get_command:1 of
msgid "Given a context and a command name, this returns a :class:`Command` object if it exists or returns `None`."
msgstr ""

#: click.core.CommandCollection.list_commands:1
#: click.core.Group.list_commands:1 click.core.MultiCommand.list_commands:1 of
msgid "Returns a list of subcommand names in the order they should appear."
msgstr ""

#: click.core.MultiCommand.result_callback:1 of
msgid "Adds a result callback to the command.  By default if a result callback is already registered this will chain them but this can be disabled with the `replace` parameter.  The result callback is invoked with the return value of the subcommand (or the list of return values from all subcommands if chaining is enabled) as well as the parameters as they would be passed to the main callback."
msgstr ""

#: click.core.MultiCommand.result_callback:9 of
msgid "Example::"
msgstr ""

#: click.core.MultiCommand.result_callback:20 of
msgid "if set to `True` an already existing result callback will be removed."
msgstr ""

#: click.core.MultiCommand.result_callback:23 of
msgid "Renamed from ``resultcallback``."
msgstr ""

#: click.core.MultiCommand.shell_complete:1 of
msgid "Return a list of completions for the incomplete value. Looks at the names of options, subcommands, and chained multi-commands."
msgstr ""

#: click.core.Group:1 of
msgid "A group allows a command to have subcommands attached. This is the most common way to implement nesting in Click."
msgstr ""

#: click.core.Group:4 of
msgid "The name of the group command."
msgstr ""

#: click.core.Group:5 of
msgid "A dict mapping names to :class:`Command` objects. Can also be a list of :class:`Command`, which will use :attr:`Command.name` to create the dict."
msgstr ""

#: click.core.Group:8 of
msgid "Other command arguments described in :class:`MultiCommand`, :class:`Command`, and :class:`BaseCommand`."
msgstr ""

#: click.core.Group:12 of
msgid "The ``commmands`` argument can be a list of command objects."
msgstr ""

#: click.core.Group.add_command:1 of
msgid "Registers another :class:`Command` with this group.  If the name is not provided, the name of the command is used."
msgstr ""

#: click.core.Group.command:1 of
msgid "A shortcut decorator for declaring and attaching a command to the group. This takes the same arguments as :func:`command` and immediately registers the created command with this group by calling :meth:`add_command`."
msgstr ""

#: click.core.Group.command:6 of
msgid "To customize the command class used, set the :attr:`command_class` attribute."
msgstr ""

#: click.core.Group.command:9 of
msgid "Added the :attr:`command_class` attribute."
msgstr ""

#: ../../docstring click.Group.command_class:1 of
msgid "If set, this is used by the group's :meth:`command` decorator as the default :class:`Command` class. This is useful to make all subcommands use a custom command class."
msgstr ""

#: ../../docstring click.Group.commands:1 of
msgid "The registered subcommands by their exported names."
msgstr ""

#: click.core.Group.group:1 of
msgid "A shortcut decorator for declaring and attaching a group to the group. This takes the same arguments as :func:`group` and immediately registers the created group with this group by calling :meth:`add_command`."
msgstr ""

#: click.core.Group.group:6 of
msgid "To customize the group class used, set the :attr:`group_class` attribute."
msgstr ""

#: click.core.Group.group:9 of
msgid "Added the :attr:`group_class` attribute."
msgstr ""

#: ../../docstring click.Group.group_class:1 of
msgid "If set, this is used by the group's :meth:`group` decorator as the default :class:`Group` class. This is useful to make all subgroups use a custom group class."
msgstr ""

#: ../../docstring click.Group.group_class:5 of
msgid "If set to the special value :class:`type` (literally ``group_class = type``), this group's class will be used as the default class. This makes a custom group class continue to make custom groups."
msgstr ""

#: click.core.CommandCollection:1 of
msgid "A command collection is a multi command that merges multiple multi commands together into one.  This is a straightforward implementation that accepts a list of different multi commands as sources and provides all the commands for each of them."
msgstr ""

#: click.core.CommandCollection.add_source:1 of
msgid "Adds a new multi command to the chain dispatcher."
msgstr ""

#: ../../docstring click.CommandCollection.sources:1 of
msgid "The list of registered multi commands."
msgstr ""

#: click.core.Parameter:1 of
msgid "A parameter to a command comes in two versions: they are either :class:`Option`\\s or :class:`Argument`\\s.  Other subclasses are currently not supported by design as some of the internals for parsing are intentionally not finalized."
msgstr ""

#: click.core.Parameter:6 of
msgid "Some settings are supported by both options and arguments."
msgstr ""

#: click.core.Parameter:8 of
msgid "the parameter declarations for this option or argument.  This is a list of flags or argument names."
msgstr ""

#: click.core.Parameter:11 of
msgid "the type that should be used.  Either a :class:`ParamType` or a Python type.  The later is converted into the former automatically if supported."
msgstr ""

#: click.core.Parameter:14 of
msgid "controls if this is optional or not."
msgstr ""

#: click.core.Parameter:15 of
msgid "the default value if omitted.  This can also be a callable, in which case it's invoked when the default is needed without any arguments."
msgstr ""

#: click.core.Parameter:18 of
msgid "A function to further process or validate the value after type conversion. It is called as ``f(ctx, param, value)`` and must return the value. It is called for all sources, including prompts."
msgstr ""

#: click.core.Parameter:22 of
msgid "the number of arguments to match.  If not ``1`` the return value is a tuple instead of single value.  The default for nargs is ``1`` (except if the type is a tuple, then it's the arity of the tuple). If ``nargs=-1``, all remaining parameters are collected."
msgstr ""

#: click.core.Parameter:27 of
msgid "how the value is represented in the help page."
msgstr ""

#: click.core.Parameter:28 of
msgid "if this is `True` then the value is passed onwards to the command callback and stored on the context, otherwise it's skipped."
msgstr ""

#: click.core.Parameter:31 of
msgid "eager values are processed before non eager ones.  This should not be set for arguments or it will inverse the order of processing."
msgstr ""

#: click.core.Parameter:34 of
msgid "a string or list of strings that are environment variables that should be checked."
msgstr ""

#: click.core.Parameter:36 of
msgid "A function that returns custom shell completions. Used instead of the param's type completion if given. Takes ``ctx, param, incomplete`` and must return a list of :class:`~click.shell_completion.CompletionItem` or a list of strings."
msgstr ""

#: click.core.Parameter:42 of
msgid "``process_value`` validates required parameters and bounded ``nargs``, and invokes the parameter callback before returning the value. This allows the callback to validate prompts. ``full_process_value`` is removed."
msgstr ""

#: click.core.Parameter:48 of
msgid "``autocompletion`` is renamed to ``shell_complete`` and has new semantics described above. The old name is deprecated and will be removed in 8.1, until then it will be wrapped to match the new requirements."
msgstr ""

#: click.core.Parameter:54 of
msgid "For ``multiple=True, nargs>1``, the default must be a list of tuples."
msgstr ""

#: click.core.Parameter:58 of
msgid "Setting a default is no longer required for ``nargs>1``, it will default to ``None``. ``multiple=True`` or ``nargs=-1`` will default to ``()``."
msgstr ""

#: click.core.Parameter:63 of
msgid "Empty environment variables are ignored rather than taking the empty string value. This makes it possible for scripts to clear variables if they can't unset them."
msgstr ""

#: click.core.Parameter:68 of
msgid "Changed signature for parameter callback to also be passed the parameter. The old callback format will still work, but it will raise a warning to give you a chance to migrate the code easier."
msgstr ""

#: click.core.Parameter.get_default:1 of
msgid "Get the default for the parameter. Tries :meth:`Context.lookup_value` first, then the local default."
msgstr ""

#: click.core.Parameter.get_default:4 of
msgid "Current context."
msgstr ""

#: click.core.Context.lookup_default:4 click.core.Parameter.get_default:5 of
msgid "If the default is a callable, call it. Disable to return the callable instead."
msgstr ""

#: click.core.Parameter.get_default:8 of
msgid "Type casting can fail in resilient parsing mode. Invalid defaults will not prevent showing help text."
msgstr ""

#: click.core.Parameter.get_default:12 of
msgid "Looks at ``ctx.default_map`` first."
msgstr ""

#: click.core.Context.lookup_default:7 click.core.Parameter.get_default:15 of
msgid "Added the ``call`` parameter."
msgstr ""

#: click.core.Parameter.get_error_hint:1 of
msgid "Get a stringified version of the param for use in error messages to indicate which param caused the error."
msgstr ""

#: click.Parameter.human_readable_name:1 of
msgid "Returns the human readable name of this parameter.  This is the same as the name for options, but the metavar for arguments."
msgstr ""

#: click.core.Parameter.shell_complete:1 of
msgid "Return a list of completions for the incomplete value. If a ``shell_complete`` function was given during init, it is used. Otherwise, the :attr:`type` :meth:`~click.types.ParamType.shell_complete` function is used."
msgstr ""

#: click.core.Parameter.to_info_dict:1 click.types.ParamType.to_info_dict:1 of
msgid "Gather information that could be useful for a tool generating user-facing documentation."
msgstr ""

#: click.core.Parameter.type_cast_value:1 of
msgid "Convert and validate a value against the option's :attr:`type`, :attr:`multiple`, and :attr:`nargs`."
msgstr ""

#: click.core.Option:1 of
msgid "Options are usually optional values on the command line and have some extra features that arguments don't have."
msgstr ""

#: click.core.Option:4 of
msgid "All other parameters are passed onwards to the parameter constructor."
msgstr ""

#: click.core.Option:6 of
msgid "controls if the default value should be shown on the help page. Normally, defaults are not shown. If this value is a string, it shows the string instead of the value. This is particularly useful for dynamic options."
msgstr ""

#: click.core.Option:10 of
msgid "controls if an environment variable should be shown on the help page.  Normally, environment variables are not shown."
msgstr ""

#: click.core.Option:13 of
msgid "if set to `True` or a non empty string then the user will be prompted for input.  If set to `True` the prompt will be the option name capitalized."
msgstr ""

#: click.core.Option:16 of
msgid "Prompt a second time to confirm the value if it was prompted for. Can be set to a string instead of ``True`` to customize the message."
msgstr ""

#: click.core.Option:19 of
msgid "If set to ``False``, the user will be prompted for input only when the option was specified as a flag without a value."
msgstr ""

#: click.core.Option:22 of
msgid "if this is `True` then the input on the prompt will be hidden from the user.  This is useful for password input."
msgstr ""

#: click.core.Option:25 of
msgid "forces this option to act as a flag.  The default is auto detection."
msgstr ""

#: click.core.Option:27 of
msgid "which value should be used for this flag if it's enabled.  This is set to a boolean automatically if the option string contains a slash to mark two options."
msgstr ""

#: click.core.Option:30 of
msgid "if this is set to `True` then the argument is accepted multiple times and recorded.  This is similar to ``nargs`` in how it works but supports arbitrary number of arguments."
msgstr ""

#: click.core.Option:34 of
msgid "this flag makes an option increment an integer."
msgstr ""

#: click.core.Option:35 of
msgid "if this is enabled then the value of this parameter will be pulled from an environment variable in case a prefix is defined on the context."
msgstr ""

#: click.core.Option:39 of
msgid "the help string."
msgstr ""

#: click.core.Option:40 of
msgid "hide this option from help outputs."
msgstr ""

#: click.core.Option:42 of
msgid "``type`` is detected from ``flag_value`` if given."
msgstr ""

#: click.core.Argument:1 of
msgid "Arguments are positional parameters to a command.  They generally provide fewer features than options but can have infinite ``nargs`` and are required by default."
msgstr ""

#: click.core.Argument:5 of
msgid "All parameters are passed onwards to the parameter constructor."
msgstr ""

#: ../../click/docs/api.rst:107
msgid "Context"
msgstr ""

#: click.core.Context:1 of
msgid "The context is a special internal object that holds state relevant for the script execution at every single level.  It's normally invisible to commands unless they opt-in to getting access to it."
msgstr ""

#: click.core.Context:5 of
msgid "The context is useful as it can pass internal objects around and can control special execution features such as reading data from environment variables."
msgstr ""

#: click.core.Context:9 of
msgid "A context can be used as context manager in which case it will call :meth:`close` on teardown."
msgstr ""

#: click.core.Context:12 of
msgid "the command class for this context."
msgstr ""

#: click.core.Context:13 of
msgid "the parent context."
msgstr ""

#: click.core.Context:14 of
msgid "the info name for this invocation.  Generally this is the most descriptive name for the script or command.  For the toplevel script it is usually the name of the script, for commands below it it's the name of the script."
msgstr ""

#: click.core.Context:19 of
msgid "an arbitrary object of user data."
msgstr ""

#: click.core.Context:20 of
msgid "the prefix to use for automatic environment variables.  If this is `None` then reading from environment variables is disabled.  This does not affect manually set environment variables which are always read."
msgstr ""

#: click.core.Context:25 of
msgid "a dictionary (like object) with default values for parameters."
msgstr ""

#: click.core.Context:27 of
msgid "the width of the terminal.  The default is inherit from parent context.  If no context defines the terminal width then auto detection will be applied."
msgstr ""

#: click.core.Context:31 of
msgid "the maximum width for content rendered by Click (this currently only affects help pages).  This defaults to 80 characters if not overridden.  In other words: even if the terminal is larger than that, Click will not format things wider than 80 characters by default.  In addition to that, formatters might add some safety mapping on the right."
msgstr ""

#: click.core.Context:39 of
msgid "if this flag is enabled then Click will parse without any interactivity or callback invocation.  Default values will also be ignored.  This is useful for implementing things such as completion support."
msgstr ""

#: click.core.Context:44 of
msgid "if this is set to `True` then extra arguments at the end will not raise an error and will be kept on the context.  The default is to inherit from the command."
msgstr ""

#: click.core.Context:48 of
msgid "if this is set to `False` then options and arguments cannot be mixed.  The default is to inherit from the command."
msgstr ""

#: click.core.Context:51 of
msgid "instructs click to ignore options it does not know and keeps them for later processing."
msgstr ""

#: click.core.Context:54 of
msgid "optionally a list of strings that define how the default help parameter is named.  The default is ``['--help']``."
msgstr ""

#: click.core.Context:57 of
msgid "an optional function that is used to normalize tokens (options, choices, etc.).  This for instance can be used to implement case insensitive behavior."
msgstr ""

#: click.core.Context:61 of
msgid "controls if the terminal supports ANSI colors or not.  The default is autodetection.  This is only needed if ANSI codes are used in texts that Click prints which is by default not the case.  This for instance would affect help output."
msgstr ""

#: click.core.Context:66 of
msgid "Show defaults for all options. If not set, defaults to the value from a parent context. Overrides an option's ``show_default`` argument."
msgstr ""

#: click.core.Context:70 of
msgid "The ``show_default`` parameter defaults to the value from the parent context."
msgstr ""

#: click.core.Context:74 of
msgid "Added the ``show_default`` parameter."
msgstr ""

#: click.core.Context:77 of
msgid "Added the ``color``, ``ignore_unknown_options``, and ``max_content_width`` parameters."
msgstr ""

#: click.core.Context:81 of
msgid "Added the ``allow_extra_args`` and ``allow_interspersed_args`` parameters."
msgstr ""

#: click.core.Context:85 of
msgid "Added the ``resilient_parsing``, ``help_option_names``, and ``token_normalize_func`` parameters."
msgstr ""

#: click.core.Context.abort:1 of
msgid "Aborts the script."
msgstr ""

#: ../../docstring click.Context.allow_extra_args:1 of
msgid "Indicates if the context allows extra args or if it should fail on parsing."
msgstr ""

#: ../../docstring click.Context.allow_interspersed_args:1 of
msgid "Indicates if the context allows mixing of arguments and options or not."
msgstr ""

#: ../../docstring click.Context.args:1 of
msgid "the leftover arguments."
msgstr ""

#: click.core.Context.call_on_close:1 of
msgid "Register a function to be called when the context tears down."
msgstr ""

#: click.core.Context.call_on_close:3 of
msgid "This can be used to close resources opened during the script execution. Resources that support Python's context manager protocol which would be used in a ``with`` statement should be registered with :meth:`with_resource` instead."
msgstr ""

#: click.core.Context.call_on_close:8 of
msgid "The function to execute on teardown."
msgstr ""

#: click.core.Context.close:1 of
msgid "Invoke all close callbacks registered with :meth:`call_on_close`, and exit all context managers entered with :meth:`with_resource`."
msgstr ""

#: ../../docstring click.Context.color:1 of
msgid "Controls if styling output is wanted or not."
msgstr ""

#: ../../docstring click.Context.command:1 of
msgid "the :class:`Command` for this context."
msgstr ""

#: click.Context.command_path:1 of
msgid "The computed command path.  This is used for the ``usage`` information on the help page.  It's automatically created by combining the info names of the chain of contexts to the root."
msgstr ""

#: click.core.Context.ensure_object:1 of
msgid "Like :meth:`find_object` but sets the innermost object to a new instance of `object_type` if it does not exist."
msgstr ""

#: click.core.Context.exit:1 of
msgid "Exits the application with a given exit code."
msgstr ""

#: click.core.Context.fail:1 of
msgid "Aborts the execution of the program with a specific error message."
msgstr ""

#: click.core.Context.fail:4 of
msgid "the error message to fail with."
msgstr ""

#: click.core.Context.find_object:1 of
msgid "Finds the closest object of a given type."
msgstr ""

#: click.core.Context.find_root:1 of
msgid "Finds the outermost context."
msgstr ""

#: click.core.Context.forward:1 of
msgid "Similar to :meth:`invoke` but fills in default keyword arguments from the current context if the other command expects it.  This cannot invoke callbacks directly, only other commands."
msgstr ""

#: click.core.Context.forward:5 of
msgid "All ``kwargs`` are tracked in :attr:`params` so they will be passed if ``forward`` is called at multiple levels."
msgstr ""

#: click.core.Context.get_help:1 of
msgid "Helper method to get formatted help page for the current context and command."
msgstr ""

#: click.core.Context.get_parameter_source:1 of
msgid "Get the source of a parameter. This indicates the location from which the value of the parameter was obtained."
msgstr ""

#: click.core.Context.get_parameter_source:4 of
msgid "This can be useful for determining when a user specified a value on the command line that is the same as the default value. It will be :attr:`~click.core.ParameterSource.DEFAULT` only if the value was actually taken from the default."
msgstr ""

#: click.core.Context.get_parameter_source:9
#: click.core.Context.set_parameter_source:4 of
msgid "The name of the parameter."
msgstr ""

#: click.core.Context.get_parameter_source:12 of
msgid "Returns ``None`` if the parameter was not provided from any source."
msgstr ""

#: click.core.Context.get_usage:1 of
msgid "Helper method to get formatted usage string for the current context and command."
msgstr ""

#: ../../docstring click.Context.help_option_names:1 of
msgid "The names for the help options."
msgstr ""

#: ../../docstring click.Context.ignore_unknown_options:1 of
msgid "Instructs click to ignore options that a command does not understand and will store it on the context for later processing.  This is primarily useful for situations where you want to call into external programs.  Generally this pattern is strongly discouraged because it's not possibly to losslessly forward all arguments."
msgstr ""

#: ../../docstring click.Context.info_name:1 of
msgid "the descriptive information name"
msgstr ""

#: click.core.Context.invoke:1 of
msgid "Invokes a command callback in exactly the way it expects.  There are two ways to invoke this method:"
msgstr ""

#: click.core.Context.invoke:4 of
msgid "the first argument can be a callback and all other arguments and keyword arguments are forwarded directly to the function."
msgstr ""

#: click.core.Context.invoke:6 of
msgid "the first argument is a click command object.  In that case all arguments are forwarded as well but proper click parameters (options and click arguments) must be keyword arguments and Click will fill in defaults."
msgstr ""

#: click.core.Context.invoke:11 of
msgid "Note that before Click 3.2 keyword arguments were not properly filled in against the intention of this code and no context was created.  For more information about this change and why it was done in a bugfix release see :ref:`upgrade-to-3.2`."
msgstr ""

#: click.core.Context.invoke:16 of
msgid "All ``kwargs`` are tracked in :attr:`params` so they will be passed if :meth:`forward` is called at multiple levels."
msgstr ""

#: ../../docstring click.Context.invoked_subcommand:1 of
msgid "This flag indicates if a subcommand is going to be executed. A group callback can use this information to figure out if it's being executed directly or because the execution flow passes onwards to a subcommand. By default it's None, but it can be the name of the subcommand to execute."
msgstr ""

#: ../../docstring click.Context.invoked_subcommand:7 of
msgid "If chaining is enabled this will be set to ``'*'`` in case any commands are executed.  It is however not possible to figure out which ones.  If you require this knowledge you should use a :func:`result_callback`."
msgstr ""

#: click.core.Context.lookup_default:1 of
msgid "Get the default for a parameter from :attr:`default_map`."
msgstr ""

#: click.core.Context.lookup_default:3 of
msgid "Name of the parameter."
msgstr ""

#: click.core.Context.make_formatter:1 of
msgid "Creates the :class:`~click.HelpFormatter` for the help and usage output."
msgstr ""

#: click.core.Context.make_formatter:4 of
msgid "To quickly customize the formatter class used without overriding this method, set the :attr:`formatter_class` attribute."
msgstr ""

#: click.core.Context.make_formatter:7 of
msgid "Added the :attr:`formatter_class` attribute."
msgstr ""

#: ../../docstring click.Context.max_content_width:1 of
msgid "The maximum width of formatted content (None implies a sensible default which is 80 for most things)."
msgstr ""

#: click.Context.meta:1 of
msgid "This is a dictionary which is shared with all the contexts that are nested.  It exists so that click utilities can store some state here if they need to.  It is however the responsibility of that code to manage this dictionary well."
msgstr ""

#: click.Context.meta:6 of
msgid "The keys are supposed to be unique dotted strings.  For instance module paths are a good choice for it.  What is stored in there is irrelevant for the operation of click.  However what is important is that code that places data here adheres to the general semantics of the system."
msgstr ""

#: ../../docstring click.Context.obj:1 of
msgid "the user object stored."
msgstr ""

#: ../../docstring click.Context.params:1 of
msgid "Map of parameter names to their parsed values. Parameters with ``expose_value=False`` are not stored."
msgstr ""

#: ../../docstring click.Context.parent:1 of
msgid "the parent context or `None` if none exists."
msgstr ""

#: ../../docstring click.Context.protected_args:1 of
msgid "protected arguments.  These are arguments that are prepended to `args` when certain parsing scenarios are encountered but must be never propagated to another arguments.  This is used to implement nested parsing."
msgstr ""

#: ../../docstring click.Context.resilient_parsing:1 of
msgid "Indicates if resilient parsing is enabled.  In that case Click will do its best to not cause any failures and default values will be ignored. Useful for completion."
msgstr ""

#: click.core.Context.scope:1 of
msgid "This helper method can be used with the context object to promote it to the current thread local (see :func:`get_current_context`). The default behavior of this is to invoke the cleanup functions which can be disabled by setting `cleanup` to `False`.  The cleanup functions are typically used for things such as closing file handles."
msgstr ""

#: click.core.Context.scope:7 of
msgid "If the cleanup is intended the context object can also be directly used as a context manager."
msgstr ""

#: click.core.Context.scope:15 of
msgid "This is equivalent::"
msgstr ""

#: click.core.Context.scope:22 of
msgid "controls if the cleanup functions should be run or not.  The default is to run these functions.  In some situations the context only wants to be temporarily pushed in which case this can be disabled. Nested pushes automatically defer the cleanup."
msgstr ""

#: click.core.Context.set_parameter_source:1 of
msgid "Set the source of a parameter. This indicates the location from which the value of the parameter was obtained."
msgstr ""

#: click.core.Context.set_parameter_source:5 of
msgid "A member of :class:`~click.core.ParameterSource`."
msgstr ""

#: ../../docstring click.Context.show_default:1 of
msgid "Show option default values when formatting help text."
msgstr ""

#: ../../docstring click.Context.terminal_width:1 of
msgid "The width of the terminal (None is autodetection)."
msgstr ""

#: click.core.Context.to_info_dict:1 of
msgid "Gather information that could be useful for a tool generating user-facing documentation. This traverses the entire CLI structure."
msgstr ""

#: ../../docstring click.Context.token_normalize_func:1 of
msgid "An optional normalization function for tokens.  This is options, choices, commands etc."
msgstr ""

#: click.core.Context.with_resource:1 of
msgid "Register a resource as if it were used in a ``with`` statement. The resource will be cleaned up when the context is popped."
msgstr ""

#: click.core.Context.with_resource:5 of
msgid "Uses :meth:`contextlib.ExitStack.enter_context`. It calls the resource's ``__enter__()`` method and returns the result. When the context is popped, it closes the stack, which calls the resource's ``__exit__()`` method."
msgstr ""

#: click.core.Context.with_resource:10 of
msgid "To register a cleanup function for something that isn't a context manager, use :meth:`call_on_close`. Or use something from :mod:`contextlib` to turn it into a context manager first."
msgstr ""

#: click.core.Context.with_resource:22 of
msgid "The context manager to enter."
msgstr ""

#: click.core.Context.with_resource of
msgid "Returns"
msgstr ""

#: click.core.Context.with_resource:23 of
msgid "Whatever ``context_manager.__enter__()`` returns."
msgstr ""

#: click.globals.get_current_context:1 of
msgid "Returns the current click context.  This can be used as a way to access the current context object from anywhere.  This is a more implicit alternative to the :func:`pass_context` decorator.  This function is primarily useful for helpers such as :func:`echo` which might be interested in changing its behavior based on the current context."
msgstr ""

#: click.globals.get_current_context:7 of
msgid "To push the current context, :meth:`Context.scope` can be used."
msgstr ""

#: click.globals.get_current_context:11 of
msgid "if set to `True` the return value is `None` if no context is available.  The default behavior is to raise a :exc:`RuntimeError`."
msgstr ""

#: click.core.ParameterSource:1 of
msgid "This is an :class:`~enum.Enum` that indicates the source of a parameter's value."
msgstr ""

#: click.core.ParameterSource:4 of
msgid "Use :meth:`click.Context.get_parameter_source` to get the source for a parameter by name."
msgstr ""

#: click.core.ParameterSource:7 of
msgid "Use :class:`~enum.Enum` and drop the ``validate`` method."
msgstr ""

#: click.core.ParameterSource:10 of
msgid "Added the ``PROMPT`` value."
msgstr ""

#: ../../docstring click.core.ParameterSource.COMMANDLINE:1 of
msgid "The value was provided by the command line args."
msgstr ""

#: ../../docstring click.core.ParameterSource.ENVIRONMENT:1 of
msgid "The value was provided with an environment variable."
msgstr ""

#: ../../docstring click.core.ParameterSource.DEFAULT:1 of
msgid "Used the default specified by the parameter."
msgstr ""

#: ../../docstring click.core.ParameterSource.DEFAULT_MAP:1 of
msgid "Used a default provided by :attr:`Context.default_map`."
msgstr ""

#: ../../docstring click.core.ParameterSource.PROMPT:1 of
msgid "Used a prompt to confirm a default or provide a value."
msgstr ""

#: ../../click/docs/api.rst:120
msgid "Types"
msgstr ""

#: click.types.File:1 of
msgid "Declares a parameter to be a file for reading or writing.  The file is automatically closed once the context tears down (after the command finished working)."
msgstr ""

#: click.types.File:5 of
msgid "Files can be opened for reading or writing.  The special value ``-`` indicates stdin or stdout depending on the mode."
msgstr ""

#: click.types.File:8 of
msgid "By default, the file is opened for reading text data, but it can also be opened in binary mode or for writing.  The encoding parameter can be used to force a specific encoding."
msgstr ""

#: click.types.File:12 of
msgid "The `lazy` flag controls if the file should be opened immediately or upon first IO. The default is to be non-lazy for standard input and output streams as well as files opened for reading, `lazy` otherwise. When opening a file lazily for reading, it is still opened temporarily for validation, but will not be held open until first IO. lazy is mainly useful when opening for writing to avoid creating the file until it is needed."
msgstr ""

#: click.types.File:19 of
msgid "Starting with Click 2.0, files can also be opened atomically in which case all writes go into a separate file in the same folder and upon completion the file will be moved over to the original location.  This is useful if a file regularly read by other users is modified."
msgstr ""

#: click.types.File:24 of
msgid "See :ref:`file-args` for more information."
msgstr ""

#: click.types.Path:1 of
msgid "The path type is similar to the :class:`File` type but it performs different checks.  First of all, instead of returning an open file handle it returns just the filename.  Secondly, it can perform various basic checks about what the file or directory should be."
msgstr ""

#: click.types.Path:6 of
msgid "if set to true, the file or directory needs to exist for this value to be valid.  If this is not required and a file does indeed not exist, then all further checks are silently skipped."
msgstr ""

#: click.types.Path:10 of
msgid "controls if a file is a possible value."
msgstr ""

#: click.types.Path:11 of
msgid "controls if a directory is a possible value."
msgstr ""

#: click.types.Path:12 of
msgid "if true, a writable check is performed."
msgstr ""

#: click.types.Path:13 of
msgid "if true, a readable check is performed."
msgstr ""

#: click.types.Path:14 of
msgid "if this is true, then the path is fully resolved before the value is passed onwards.  This means that it's absolute and symlinks are resolved.  It will not expand a tilde-prefix, as this is supposed to be done by the shell only."
msgstr ""

#: click.types.Path:19 of
msgid "If this is set to `True`, a single dash to indicate standard streams is permitted."
msgstr ""

#: click.types.Path:21 of
msgid "Convert the incoming path value to this type. If ``None``, keep Python's default, which is ``str``. Useful to convert to :class:`pathlib.Path`."
msgstr ""

#: click.types.Path:25 of
msgid "Allow passing ``type=pathlib.Path``."
msgstr ""

#: click.types.Path:28 of
msgid "Added the ``allow_dash`` parameter."
msgstr ""

#: click.types.Choice:1 of
msgid "The choice type allows a value to be checked against a fixed set of supported values. All of these values have to be strings."
msgstr ""

#: click.types.Choice:4 of
msgid "You should only pass a list or tuple of choices. Other iterables (like generators) may lead to surprising results."
msgstr ""

#: click.types.Choice:7 of
msgid "The resulting value will always be one of the originally passed choices regardless of ``case_sensitive`` or any ``ctx.token_normalize_func`` being specified."
msgstr ""

#: click.types.Choice:11 of
msgid "See :ref:`choice-opts` for an example."
msgstr ""

#: click.types.Choice:13 of
msgid "Set to false to make choices case insensitive. Defaults to true."
msgstr ""

#: click.types.IntRange:1 of
msgid "Restrict an :data:`click.INT` value to a range of accepted values. See :ref:`ranges`."
msgstr ""

#: click.types.FloatRange:4 click.types.IntRange:4 of
msgid "If ``min`` or ``max`` are not passed, any value is accepted in that direction. If ``min_open`` or ``max_open`` are enabled, the corresponding boundary is not included in the range."
msgstr ""

#: click.types.IntRange:8 of
msgid "If ``clamp`` is enabled, a value outside the range is clamped to the boundary instead of failing."
msgstr ""

#: click.types.FloatRange:12 click.types.IntRange:11 of
msgid "Added the ``min_open`` and ``max_open`` parameters."
msgstr ""

#: click.types.FloatRange:1 of
msgid "Restrict a :data:`click.FLOAT` value to a range of accepted values. See :ref:`ranges`."
msgstr ""

#: click.types.FloatRange:8 of
msgid "If ``clamp`` is enabled, a value outside the range is clamped to the boundary instead of failing. This is not supported if either boundary is marked ``open``."
msgstr ""

#: click.types.DateTime:1 of
msgid "The DateTime type converts date strings into `datetime` objects."
msgstr ""

#: click.types.DateTime:3 of
msgid "The format strings which are checked are configurable, but default to some common (non-timezone aware) ISO 8601 formats."
msgstr ""

#: click.types.DateTime:6 of
msgid "When specifying *DateTime* formats, you should only pass a list or a tuple. Other iterables, like generators, may lead to surprising results."
msgstr ""

#: click.types.DateTime:9 of
msgid "The format strings are processed using ``datetime.strptime``, and this consequently defines the format strings which are allowed."
msgstr ""

#: click.types.DateTime:12 of
msgid "Parsing is tried using each format, in order, and the first format which parses successfully is used."
msgstr ""

#: click.types.DateTime:15 of
#, python-format
msgid "A list or tuple of date format strings, in the order in which they should be tried. Defaults to ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``, ``'%Y-%m-%d %H:%M:%S'``."
msgstr ""

#: click.types.Tuple:1 of
msgid "The default behavior of Click is to apply a type on a value directly. This works well in most cases, except for when `nargs` is set to a fixed count and different types should be used for different items.  In this case the :class:`Tuple` type can be used.  This type can only be used if `nargs` is set to a fixed number."
msgstr ""

#: click.types.Tuple:7 of
msgid "For more information see :ref:`tuple-type`."
msgstr ""

#: click.types.Tuple:9 of
msgid "This can be selected by using a Python tuple literal as a type."
msgstr ""

#: click.types.Tuple:11 of
msgid "a list of types that should be used for the tuple items."
msgstr ""

#: click.types.ParamType:1 of
msgid "Represents the type of a parameter. Validates and converts values from the command line or Python into the correct type."
msgstr ""

#: click.types.ParamType:4 of
msgid "To implement a custom type, subclass and implement at least the following:"
msgstr ""

#: click.types.ParamType:7 of
msgid "The :attr:`name` class attribute must be set."
msgstr ""

#: click.types.ParamType:8 of
msgid "Calling an instance of the type with ``None`` must return ``None``. This is already implemented by default."
msgstr ""

#: click.types.ParamType:10 of
msgid ":meth:`convert` must convert string values to the correct type."
msgstr ""

#: click.types.ParamType:11 of
msgid ":meth:`convert` must accept values that are already the correct type."
msgstr ""

#: click.types.ParamType:13 of
msgid "It must be able to convert a value if the ``ctx`` and ``param`` arguments are ``None``. This can occur when converting prompt input."
msgstr ""

#: click.types.ParamType.convert:1 of
msgid "Convert the value to the correct type. This is not called if the value is ``None`` (the missing value)."
msgstr ""

#: click.types.ParamType.convert:4 of
msgid "This must accept string values from the command line, as well as values that are already the correct type. It may also convert other compatible types."
msgstr ""

#: click.types.ParamType.convert:8 of
msgid "The ``param`` and ``ctx`` arguments may be ``None`` in certain situations, such as when converting prompt input."
msgstr ""

#: click.types.ParamType.convert:11 of
msgid "If the value cannot be converted, call :meth:`fail` with a descriptive message."
msgstr ""

#: click.types.ParamType.convert:14 of
msgid "The value to convert."
msgstr ""

#: click.types.ParamType.convert:15 of
msgid "The parameter that is using this type to convert its value. May be ``None``."
msgstr ""

#: click.types.ParamType.convert:17 of
msgid "The current context that arrived at this value. May be ``None``."
msgstr ""

#: ../../docstring click.ParamType.envvar_list_splitter:1 of
msgid "if a list of this type is expected and the value is pulled from a string environment variable, this is what splits it up.  `None` means any whitespace.  For all parameters the general rule is that whitespace splits them up.  The exception are paths and files which are split by ``os.path.pathsep`` by default (\":\" on Unix and \";\" on Windows)."
msgstr ""

#: click.types.ParamType.fail:1 of
msgid "Helper method to fail with an invalid value message."
msgstr ""

#: click.types.ParamType.get_metavar:1 of
msgid "Returns the metavar default for this param if it provides one."
msgstr ""

#: click.types.ParamType.get_missing_message:1 of
msgid "Optionally might return extra information about a missing parameter."
msgstr ""

#: ../../docstring click.ParamType.name:1 of
msgid "the descriptive name of this type"
msgstr ""

#: click.types.ParamType.shell_complete:1 of
msgid "Return a list of :class:`~click.shell_completion.CompletionItem` objects for the incomplete value. Most types do not provide completions, but some do, and this allows custom types to provide custom completions as well."
msgstr ""

#: click.types.ParamType.shell_complete:8 of
msgid "The parameter that is requesting completion."
msgstr ""

#: click.types.ParamType.split_envvar_value:1 of
msgid "Given a value from an environment variable this splits it up into small chunks depending on the defined envvar list splitter."
msgstr ""

#: click.types.ParamType.split_envvar_value:4 of
msgid "If the splitter is set to `None`, which means that whitespace splits, then leading and trailing whitespace is ignored.  Otherwise, leading and trailing splitters usually lead to empty items being included."
msgstr ""

#: ../../click/docs/api.rst:152
msgid "Exceptions"
msgstr ""

#: click.exceptions.ClickException:1 of
msgid "An exception that Click can handle and show to the user."
msgstr ""

#: click.exceptions.Abort:1 of
msgid "An internal signalling exception that signals Click to abort."
msgstr ""

#: click.exceptions.UsageError:1 of
msgid "An internal exception that signals a usage error.  This typically aborts any further handling."
msgstr ""

#: click.exceptions.UsageError:4 of
msgid "the error message to display."
msgstr ""

#: click.exceptions.UsageError:5 of
msgid "optionally the context that caused this error.  Click will fill in the context automatically in some situations."
msgstr ""

#: click.exceptions.BadParameter:1 of
msgid "An exception that formats out a standardized error message for a bad parameter.  This is useful when thrown from a callback or type as Click will attach contextual information to it (for instance, which parameter it is)."
msgstr ""

#: click.exceptions.BadParameter:8 of
msgid "the parameter object that caused this error.  This can be left out, and Click will attach this info itself if possible."
msgstr ""

#: click.exceptions.BadParameter:11 of
msgid "a string that shows up as parameter name.  This can be used as alternative to `param` in cases where custom validation should happen.  If it is a string it's used as such, if it's a list then each item is quoted and separated."
msgstr ""

#: click.exceptions.FileError:1 of
msgid "Raised if a file cannot be opened."
msgstr ""

#: click.exceptions.NoSuchOption:1 of
msgid "Raised if click attempted to handle an option that does not exist."
msgstr ""

#: click.exceptions.BadOptionUsage:1 of
msgid "Raised if an option is generally supplied but the use of the option was incorrect.  This is for instance raised if the number of arguments for an option is not correct."
msgstr ""

#: click.exceptions.BadOptionUsage:7 of
msgid "the name of the option being used incorrectly."
msgstr ""

#: click.exceptions.BadArgumentUsage:1 of
msgid "Raised if an argument is generally supplied but the use of the argument was incorrect.  This is for instance raised if the number of values for an argument is not correct."
msgstr ""

#: ../../click/docs/api.rst:171
msgid "Formatting"
msgstr ""

#: click.formatting.HelpFormatter:1 of
msgid "This class helps with formatting text-based help pages.  It's usually just needed for very special internal cases, but it's also exposed so that developers can write their own fancy outputs."
msgstr ""

#: click.formatting.HelpFormatter:5 of
msgid "At present, it always writes into memory."
msgstr ""

#: click.formatting.HelpFormatter:7 of
msgid "the additional increment for each level."
msgstr ""

#: click.formatting.HelpFormatter:8 of
msgid "the width for the text.  This defaults to the terminal width clamped to a maximum of 78."
msgstr ""

#: click.formatting.HelpFormatter.dedent:1 of
msgid "Decreases the indentation."
msgstr ""

#: click.formatting.HelpFormatter.getvalue:1 of
msgid "Returns the buffer contents."
msgstr ""

#: click.formatting.HelpFormatter.indent:1 of
msgid "Increases the indentation."
msgstr ""

#: click.formatting.HelpFormatter.indentation:1 of
msgid "A context manager that increases the indentation."
msgstr ""

#: click.formatting.HelpFormatter.section:1 of
msgid "Helpful context manager that writes a paragraph, a heading, and the indents."
msgstr ""

#: click.formatting.HelpFormatter.section:4 of
msgid "the section name that is written as heading."
msgstr ""

#: click.formatting.HelpFormatter.write:1 of
msgid "Writes a unicode string into the internal buffer."
msgstr ""

#: click.formatting.HelpFormatter.write_dl:1 of
msgid "Writes a definition list into the buffer.  This is how options and commands are usually formatted."
msgstr ""

#: click.formatting.HelpFormatter.write_dl:4 of
msgid "a list of two item tuples for the terms and values."
msgstr ""

#: click.formatting.HelpFormatter.write_dl:5 of
msgid "the maximum width of the first column."
msgstr ""

#: click.formatting.HelpFormatter.write_dl:6 of
msgid "the number of spaces between the first and second column."
msgstr ""

#: click.formatting.HelpFormatter.write_heading:1 of
msgid "Writes a heading into the buffer."
msgstr ""

#: click.formatting.HelpFormatter.write_paragraph:1 of
msgid "Writes a paragraph into the buffer."
msgstr ""

#: click.formatting.HelpFormatter.write_text:1 of
msgid "Writes re-indented text into the buffer.  This rewraps and preserves paragraphs."
msgstr ""

#: click.formatting.HelpFormatter.write_usage:1 of
msgid "Writes a usage line into the buffer."
msgstr ""

#: click.formatting.HelpFormatter.write_usage:3 of
msgid "the program name."
msgstr ""

#: click.formatting.HelpFormatter.write_usage:4 of
msgid "whitespace separated list of arguments."
msgstr ""

#: click.formatting.HelpFormatter.write_usage:5 of
msgid "The prefix for the first line. Defaults to ``\"Usage: \"``."
msgstr ""

#: click.formatting.wrap_text:1 of
msgid "A helper function that intelligently wraps text.  By default, it assumes that it operates on a single paragraph of text but if the `preserve_paragraphs` parameter is provided it will intelligently handle paragraphs (defined by two empty lines)."
msgstr ""

#: click.formatting.wrap_text:6 of
msgid "If paragraphs are handled, a paragraph can be prefixed with an empty line containing the ``\\b`` character (``\\x08``) to indicate that no rewrapping should happen in that block."
msgstr ""

#: click.formatting.wrap_text:10 of
msgid "the text that should be rewrapped."
msgstr ""

#: click.formatting.wrap_text:11 of
msgid "the maximum width for the text."
msgstr ""

#: click.formatting.wrap_text:12 of
msgid "the initial indent that should be placed on the first line as a string."
msgstr ""

#: click.formatting.wrap_text:14 of
msgid "the indent string that should be placed on each consecutive line."
msgstr ""

#: click.formatting.wrap_text:16 of
msgid "if this flag is set then the wrapping will intelligently handle paragraphs."
msgstr ""

#: ../../click/docs/api.rst:179
msgid "Parsing"
msgstr ""

#: click.parser.OptionParser:1 of
msgid "The option parser is an internal class that is ultimately used to parse options and arguments.  It's modelled after optparse and brings a similar but vastly simplified API.  It should generally not be used directly as the high level Click classes wrap it for you."
msgstr ""

#: click.parser.OptionParser:6 of
msgid "It's not nearly as extensible as optparse or argparse as it does not implement features that are implemented on a higher level (such as types or defaults)."
msgstr ""

#: click.parser.OptionParser:10 of
msgid "optionally the :class:`~click.Context` where this parser should go with."
msgstr ""

#: click.parser.OptionParser.add_argument:1 of
msgid "Adds a positional argument named `dest` to the parser."
msgstr ""

#: click.parser.OptionParser.add_argument:3
#: click.parser.OptionParser.add_option:6 of
msgid "The `obj` can be used to identify the option in the order list that is returned from the parser."
msgstr ""

#: click.parser.OptionParser.add_option:1 of
msgid "Adds a new option named `dest` to the parser.  The destination is not inferred (unlike with optparse) and needs to be explicitly provided.  Action can be any of ``store``, ``store_const``, ``append``, ``appnd_const`` or ``count``."
msgstr ""

#: ../../docstring click.OptionParser.allow_interspersed_args:1 of
msgid "This controls how the parser deals with interspersed arguments. If this is set to `False`, the parser will stop on the first non-option.  Click uses this to implement nested subcommands safely."
msgstr ""

#: ../../docstring click.OptionParser.ctx:1 of
msgid "The :class:`~click.Context` for this parser.  This might be `None` for some advanced use cases."
msgstr ""

#: ../../docstring click.OptionParser.ignore_unknown_options:1 of
msgid "This tells the parser how to deal with unknown options.  By default it will error out (which is sensible), but there is a second mode where it will ignore it and continue processing after shifting all the unknown options into the resulting args."
msgstr ""

#: click.parser.OptionParser.parse_args:1 of
msgid "Parses positional arguments and returns ``(values, args, order)`` for the parsed options and arguments as well as the leftover arguments if there are any.  The order is a list of objects as they appear on the command line.  If arguments appear multiple times they will be memorized multiple times as well."
msgstr ""

#: ../../click/docs/api.rst:186
msgid "Shell Completion"
msgstr ""

#: ../../click/docs/api.rst:188
msgid "See :doc:`/shell-completion` for information about enabling and customizing Click's shell completion system."
msgstr ""

#: click.shell_completion.CompletionItem:1 of
msgid "Represents a completion value and metadata about the value. The default metadata is ``type`` to indicate special shell handling, and ``help`` if a shell supports showing a help string next to the value."
msgstr ""

#: click.shell_completion.CompletionItem:6 of
msgid "Arbitrary parameters can be passed when creating the object, and accessed using ``item.attr``. If an attribute wasn't passed, accessing it returns ``None``."
msgstr ""

#: click.shell_completion.CompletionItem:10 of
msgid "The completion suggestion."
msgstr ""

#: click.shell_completion.CompletionItem:11 of
msgid "Tells the shell script to provide special completion support for the type. Click uses ``\"dir\"`` and ``\"file\"``."
msgstr ""

#: click.shell_completion.CompletionItem:13 of
msgid "String shown next to the value if supported."
msgstr ""

#: click.shell_completion.CompletionItem:14 of
msgid "Arbitrary metadata. The built-in implementations don't use this, but custom type completions paired with custom shell support could use it."
msgstr ""

#: click.shell_completion.ShellComplete:1 of
msgid "Base class for providing shell completion support. A subclass for a given shell will override attributes and methods to implement the completion instructions (``source`` and ``complete``)."
msgstr ""

#: click.shell_completion.ShellComplete:5 of
msgid "Command being called."
msgstr ""

#: click.shell_completion.ShellComplete:6 of
msgid "Name of the executable in the shell."
msgstr ""

#: click.shell_completion.ShellComplete:7 of
msgid "Name of the environment variable that holds the completion instruction."
msgstr ""

#: ../../docstring click.shell_completion.ShellComplete.name:1 of
msgid "Name to register the shell as with :func:`add_completion_class`. This is used in completion instructions (``{name}_source`` and ``{name}_complete``)."
msgstr ""

#: ../../docstring click.shell_completion.ShellComplete.source_template:1 of
msgid "Completion script template formatted by :meth:`source`. This must be provided by subclasses."
msgstr ""

#: click.shell_completion.ShellComplete.func_name:1 of
msgid "The name of the shell function defined by the completion script."
msgstr ""

#: click.shell_completion.ShellComplete.source_vars:1 of
msgid "Vars for formatting :attr:`source_template`."
msgstr ""

#: click.shell_completion.ShellComplete.source_vars:3 of
msgid "By default this provides ``complete_func``, ``complete_var``, and ``prog_name``."
msgstr ""

#: click.shell_completion.ShellComplete.source:1 of
msgid "Produce the shell script that defines the completion function. By default this ``%``-style formats :attr:`source_template` with the dict returned by :meth:`source_vars`."
msgstr ""

#: click.shell_completion.ShellComplete.get_completion_args:1 of
msgid "Use the env vars defined by the shell script to return a tuple of ``args, incomplete``. This must be implemented by subclasses."
msgstr ""

#: click.shell_completion.ShellComplete.get_completions:1 of
msgid "Determine the context and last complete command or parameter from the complete args. Call that object's ``shell_complete`` method to get the completions for the incomplete value."
msgstr ""

#: click.shell_completion.ShellComplete.get_completions:5 of
msgid "List of complete args before the incomplete value."
msgstr ""

#: click.shell_completion.ShellComplete.format_completion:1 of
msgid "Format a completion item into the form recognized by the shell script. This must be implemented by subclasses."
msgstr ""

#: click.shell_completion.ShellComplete.format_completion:4 of
msgid "Completion item to format."
msgstr ""

#: click.shell_completion.ShellComplete.complete:1 of
msgid "Produce the completion data to send back to the shell."
msgstr ""

#: click.shell_completion.ShellComplete.complete:3 of
msgid "By default this calls :meth:`get_completion_args`, gets the completions, then calls :meth:`format_completion` for each completion."
msgstr ""

#: click.shell_completion.add_completion_class:1 of
msgid "Register a :class:`ShellComplete` subclass under the given name. The name will be provided by the completion instruction environment variable during completion."
msgstr ""

#: click.shell_completion.add_completion_class:5 of
msgid "The completion class that will handle completion for the shell."
msgstr ""

#: click.shell_completion.add_completion_class:7 of
msgid "Name to register the class under. Defaults to the class's ``name`` attribute."
msgstr ""

#: ../../click/docs/api.rst:203
msgid "Testing"
msgstr ""

#: click.testing.CliRunner:1 of
msgid "The CLI runner provides functionality to invoke a Click command line script for unittesting purposes in a isolated environment.  This only works in single-threaded systems without any concurrency as it changes the global interpreter state."
msgstr ""

#: click.testing.CliRunner:6 of
msgid "the character set for the input and output data."
msgstr ""

#: click.testing.CliRunner:7 of
msgid "a dictionary with environment variables for overriding."
msgstr ""

#: click.testing.CliRunner:8 of
msgid "if this is set to `True`, then reading from stdin writes to stdout.  This is useful for showing examples in some circumstances.  Note that regular prompts will automatically echo the input."
msgstr ""

#: click.testing.CliRunner:12 of
msgid "if this is set to `False`, then stdout and stderr are preserved as independent streams.  This is useful for Unix-philosophy apps that have predictable stdout and noisy stderr, such that each may be measured independently"
msgstr ""

#: click.testing.CliRunner.get_default_prog_name:1 of
msgid "Given a command object it will return the default program name for it.  The default is the `name` attribute or ``\"root\"`` if not set."
msgstr ""

#: click.testing.CliRunner.invoke:1 of
msgid "Invokes a command in an isolated environment.  The arguments are forwarded directly to the command line script, the `extra` keyword arguments are passed to the :meth:`~clickpkg.Command.main` function of the command."
msgstr ""

#: click.testing.CliRunner.invoke:6 of
msgid "This returns a :class:`Result` object."
msgstr ""

#: click.testing.CliRunner.invoke:8 of
msgid "the command to invoke"
msgstr ""

#: click.testing.CliRunner.invoke:9 of
msgid "the arguments to invoke. It may be given as an iterable or a string. When given as string it will be interpreted as a Unix shell command. More details at :func:`shlex.split`."
msgstr ""

#: click.testing.CliRunner.invoke:13 of
msgid "the input data for `sys.stdin`."
msgstr ""

#: click.testing.CliRunner.invoke:14 of
msgid "the environment overrides."
msgstr ""

#: click.testing.CliRunner.invoke:15 of
msgid "Whether to catch any other exceptions than ``SystemExit``."
msgstr ""

#: click.testing.CliRunner.invoke:17 of
msgid "the keyword arguments to pass to :meth:`main`."
msgstr ""

#: click.testing.CliRunner.invoke:18 click.testing.CliRunner.isolation:11 of
msgid "whether the output should contain color codes. The application can still override this explicitly."
msgstr ""

#: click.testing.CliRunner.invoke:21 of
msgid "The result object has the ``return_value`` attribute with the value returned from the invoked command."
msgstr ""

#: click.testing.CliRunner.invoke:28 of
msgid "Added the ``catch_exceptions`` parameter."
msgstr ""

#: click.testing.CliRunner.invoke:31 of
msgid "The result object has the ``exc_info`` attribute with the traceback if available."
msgstr ""

#: click.testing.CliRunner.isolated_filesystem:1 of
msgid "A context manager that creates a temporary directory and changes the current working directory to it. This isolates tests that affect the contents of the CWD to prevent them from interfering with each other."
msgstr ""

#: click.testing.CliRunner.isolated_filesystem:6 of
msgid "Create the temporary directory under this directory. If given, the created directory is not removed when exiting."
msgstr ""

#: click.testing.CliRunner.isolated_filesystem:10 of
msgid "Added the ``temp_dir`` parameter."
msgstr ""

#: click.testing.CliRunner.isolation:1 of
msgid "A context manager that sets up the isolation for invoking of a command line tool.  This sets up stdin with the given input data and `os.environ` with the overrides from the given dictionary. This also rebinds some internals in Click to be mocked (like the prompt functionality)."
msgstr ""

#: click.testing.CliRunner.isolation:7 of
msgid "This is automatically done in the :meth:`invoke` method."
msgstr ""

#: click.testing.CliRunner.isolation:9 of
msgid "the input stream to put into sys.stdin."
msgstr ""

#: click.testing.CliRunner.isolation:10 of
msgid "the environment overrides as dictionary."
msgstr ""

#: click.testing.CliRunner.isolation:14 of
msgid "``stderr`` is opened with ``errors=\"backslashreplace\"`` instead of the default ``\"strict\"``."
msgstr ""

#: click.testing.CliRunner.make_env:1 of
msgid "Returns the environment overrides for invoking a script."
msgstr ""

#: click.testing.Result:1 of
msgid "Holds the captured result of an invoked CLI script."
msgstr ""

#: ../../docstring click.testing.Result.exc_info:1 of
msgid "The traceback"
msgstr ""

#: ../../docstring click.testing.Result.exception:1 of
msgid "The exception that happened if one did."
msgstr ""

#: ../../docstring click.testing.Result.exit_code:1 of
msgid "The exit code as integer."
msgstr ""

#: click.testing.Result.output:1 of
msgid "The (standard) output as unicode string."
msgstr ""

#: ../../docstring click.testing.Result.return_value:1 of
msgid "The value returned from the invoked command."
msgstr ""

#: ../../docstring click.testing.Result.runner:1 of
msgid "The runner that created the result"
msgstr ""

#: click.testing.Result.stderr:1 of
msgid "The standard error as unicode string."
msgstr ""

#: ../../docstring click.testing.Result.stderr_bytes:1 of
msgid "The standard error as bytes, or None if not available"
msgstr ""

#: click.testing.Result.stdout:1 of
msgid "The standard output as unicode string."
msgstr ""

#: ../../docstring click.testing.Result.stdout_bytes:1 of
msgid "The standard output as bytes."
msgstr ""

